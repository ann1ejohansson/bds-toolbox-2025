[
  {
    "objectID": "slides/slides.html#welcome-to-the-bds-toolbox-module-data-visualization",
    "href": "slides/slides.html#welcome-to-the-bds-toolbox-module-data-visualization",
    "title": "Data Visualization",
    "section": "Welcome to the BDS Toolbox module Data Visualization! üëã",
    "text": "Welcome to the BDS Toolbox module Data Visualization! üëã\n\n\n\nFind everything you need for this module on the website:data-visualization-2025\n\n\n\n\n\ncover photo made in R by Danielle Navarro\n\n\n\n\nSlides made using quarto"
  },
  {
    "objectID": "slides/slides.html#schedule",
    "href": "slides/slides.html#schedule",
    "title": "Data Visualization",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\n\nWhen\nWhat\nPrepare\nTutorial\n\n\n\n\nTuesday, 30/09\n15.00 - 18.00\nData Visualization Session 1\nGood and bad plots\nggplot basics\n[Read] DV book ch.¬†1, 3\n[Watch videos] Fundamentals of Data Visualization\nKick-off quiz\n\n\nFriday, 03/10\n12.30 - 15.30\n\n\nData Visualization Session 2\nBetter plots\n[Read] DV Book ch.¬†3.7, 4.3, 5.3, 5.5, 5.6, 6.0, 6.1, 6.2, 8.1, 8.2, 8.3\n[Watch videos] Themes, Recycling Themes, Trend lines / Stats, Color scheme, Multiple plots, Facets, Saving plots\nKick-off quiz\nWork on Data Visualization Assignment 1\n\n\nTuesday, 07/10\n15.00 - 18.00\nData Visualization Session 3\nIntroduction to final assignment\n\nData Visualization Assignment 2\n\n\nFriday, 10/10,\n12.30 - 15.30\nQ&A\n\nWork on Final Assignment"
  },
  {
    "objectID": "slides/slides.html#assignments",
    "href": "slides/slides.html#assignments",
    "title": "Data Visualization",
    "section": "Assignments",
    "text": "Assignments\n\n\n\n\n\n\nAssignment 1\n\nPart A alone, part B with your group.\nX% of the grade\n\n\n\nAssignment 2\n\nYour final data visualization project.\nWork with your group.\nX% of the grade"
  },
  {
    "objectID": "slides/slides.html#deadlines",
    "href": "slides/slides.html#deadlines",
    "title": "Data Visualization",
    "section": "Deadlines",
    "text": "Deadlines\n\nAssignment 1 ‚Äì Sunday 5/10 23.59\nFirst draft of Assignment 2 ‚Äì Friday 10/10 12.30\nPeer review of Assignment 2 ‚Äì Friday 10/10 23.59\nAssignment 2 ‚Äì Sunday 12/10 23.59"
  },
  {
    "objectID": "slides/slides.html#materials",
    "href": "slides/slides.html#materials",
    "title": "Data Visualization",
    "section": "Materials",
    "text": "Materials\n\n\n\n\n\n\n\n\n\nr4ds.had.co.nz\n\n\n\n\n\n\n\nsocviz.co\n\n\n\n\n\n\n\nVideos on canvas\n\n\n\n\n\n\nHelpful extra resources\n\nClaus Wilke: Fundamentals of Data Viz\nhttps://psyteachr.github.io/introdataviz/plotstyle.html"
  },
  {
    "objectID": "slides/slides.html#today",
    "href": "slides/slides.html#today",
    "title": "Data Visualization",
    "section": "Today",
    "text": "Today\n‚ùì Quiz\nüìä What makes a plot good (and bad)?\nü™Ñ Guiding principles"
  },
  {
    "objectID": "slides/slides.html#quiz",
    "href": "slides/slides.html#quiz",
    "title": "Data Visualization",
    "section": "Quiz!",
    "text": "Quiz!\nhttps://canvas.uva.nl/courses/54361/quizzes"
  },
  {
    "objectID": "slides/slides.html#section",
    "href": "slides/slides.html#section",
    "title": "Data Visualization",
    "section": "üí¨",
    "text": "üí¨\nWhy visualize data?"
  },
  {
    "objectID": "slides/slides.html#anscombes-quartet",
    "href": "slides/slides.html#anscombes-quartet",
    "title": "Data Visualization",
    "section": "Anscombe‚Äôs quartet",
    "text": "Anscombe‚Äôs quartet\n\n\n \n\n\n\nCode\nlibrary(\"datasauRus\")\ndatasaurus_dozen %&gt;% \n  ggplot2::ggplot(aes(x = x, y = y, color = dataset)) +\n  ggplot2::geom_point() +\n  ggplot2::theme_void() +\n  ggplot2::geom_smooth(method = \"lm\", color = \"gray\", fill = \"gray\", alpha = .5) +\n  ggplot2::theme(legend.position = \"none\", text = element_text(size = 30)) +\n  ggplot2::facet_wrap(~dataset, ncol = 4)\n\n\n\n\n\n\n\n\n\n\n\nPackages: datasauRus, anscombiser.\nMore information: Same Stats, Different Graphs, socviz.co."
  },
  {
    "objectID": "slides/slides.html#exploratory-versus-explanatory",
    "href": "slides/slides.html#exploratory-versus-explanatory",
    "title": "Data Visualization",
    "section": "Exploratory versus explanatory",
    "text": "Exploratory versus explanatory\n\nExploratory in the sense of data exploration. Exploratory in the sense of visualization exploration (as in previous example, where the same data can be plotted in several ways). In both cases, you can create ugly plots.\nWe focus on explanatory data viz (also bridge to next). Beautiful plots!\n\n\n\n\n\n\nSource: Natalia Kiseleva\n\n\n\n\n\n\nSource: Scott McCloud\n\n\n\nExploratory: examine the structure of your data.\nExplanatory: tell a story with your data.\n\n\n\nMore resources: clauswilke.com (telling a story and making a point), susielu.com (different interpretation of exploratory/explanatory)."
  },
  {
    "objectID": "slides/slides.html#exploratory-versus-explanatory-1",
    "href": "slides/slides.html#exploratory-versus-explanatory-1",
    "title": "Data Visualization",
    "section": "Exploratory versus explanatory",
    "text": "Exploratory versus explanatory\n\n\n\n\n\n\nSource: storytellingwithdata.com\n\nMore resources: clauswilke.com (telling a story and making a point), susielu.com (different interpretation of exploratory/explanatory)."
  },
  {
    "objectID": "slides/slides.html#exploratory-versus-explanatory-2",
    "href": "slides/slides.html#exploratory-versus-explanatory-2",
    "title": "Data Visualization",
    "section": "Exploratory versus explanatory",
    "text": "Exploratory versus explanatory"
  },
  {
    "objectID": "slides/slides.html#section-3",
    "href": "slides/slides.html#section-3",
    "title": "Data Visualization",
    "section": "üí¨",
    "text": "üí¨\nWhat is more important? An eye or an algorithm?\nWhat are the consequences of overrelying on statistical techniques? What are the consequences of overrelying on visualizations?"
  },
  {
    "objectID": "slides/slides.html#what-makes-a-bad-plot-bad",
    "href": "slides/slides.html#what-makes-a-bad-plot-bad",
    "title": "Data Visualization",
    "section": "What makes a bad plot bad?",
    "text": "What makes a bad plot bad?"
  },
  {
    "objectID": "slides/slides.html#speed-dates",
    "href": "slides/slides.html#speed-dates",
    "title": "Data Visualization",
    "section": "üí¨ Speed dates",
    "text": "üí¨ Speed dates\n\n\n\nWhat do you think about this plot?\nWhat elements can be improved?\nAre there still good things with the plot?\n\n\n\n\n\nKarl Broman"
  },
  {
    "objectID": "slides/slides.html#aims",
    "href": "slides/slides.html#aims",
    "title": "Data Visualization",
    "section": "Aims",
    "text": "Aims\nYour goal is to go from exploring the Prowise data to telling a story with it.\n\nAssignment 1: Choose a research question. Explore the data and create a set of visualizations to help you understand the data.\nAssignment 2: Create a final data visualization that tells a story with the data. Compiled into a html document, and presented in the GitHub repository."
  },
  {
    "objectID": "slides/slides.html#the-data",
    "href": "slides/slides.html#the-data",
    "title": "Data Visualization",
    "section": "The data",
    "text": "The data"
  },
  {
    "objectID": "slides/slides.html#requirements",
    "href": "slides/slides.html#requirements",
    "title": "Data Visualization",
    "section": "Requirements",
    "text": "Requirements\n\nUse R and R Markdown (or Quarto) to create your visualizations.\nThe markdown document should be in the style of a report: explain your research question, and how you came to your conclusion. Not more than 1000 words.\n\nInclude at least one exploratory graph, and explain how it helped you understand the data.\nOnly your final, explanatory graph, will be graded. Clearly mark which graph this is."
  },
  {
    "objectID": "slides/slides.html#workflow",
    "href": "slides/slides.html#workflow",
    "title": "Data Visualization",
    "section": "Workflow",
    "text": "Workflow\n\nComment your code clearly. We want to understand your thought process.\nWork in the Data Visualization Server, and compile the html document there.\n\nÔ∏è‚ö† Only upload the html document to GitHub, not the R scripts and especially not any data."
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Data Visualization Assignment 1",
    "section": "",
    "text": "This is the first assignment for the Data Visualization module. The aim here is to get acquainted with the Prowise Learn data, practice with some ggplot basics, and to get you started with working with your visualizations for the final assignment.\nWith this assignment, you can gain X points, plus X bonus points. Please refer here for an overview of how we grade your data visualizations. Part A is completed, and thus also graded, individually. Part B should be completed with your assigned group. Please make sure to clearly indicate your group number and names of all group members in your submission. One person should submit the assignment on behalf of the group. If more than one person submits the group assignment, we will only look at one of them.\nThe assignment is due on Sunday October 5th, 2025 at 23:59. Submit your assignment to Canvas, under ‚ÄúDV Assignment 1‚Äù.\nYour submission for Part 1 should contain the following files:\n\nR code (style checked & working) in a .Rmd or .R file.\n\nYour (improved) version of the plot, compiled to .html or .pdf.\n\nYour interactive plot, compiled to .html or .pdf.\n\nwith file names in the following structure: DV-Assignment1-Firstname-Lastname-PartA.Rmd (or .R), DV-Assignment1-Firstname-Lastname-PartA.pdf (or .html).\nYour group submission (Part 2) should contain the following files:\n\nR code (style checked & working) in a .Rmd or .R file.\nYour plot and short description, compiled to .html or .pdf.\n\nwith file names in the following structure: DV-Assignment1-GroupX-PartB.Rmd (or .R), DV-Assignment1-GroupX-PartB.pdf (or .html).\n\n\nWe want to be able to understand and run your code. This will help us to give you a fair grade. Therefore we ask that - before you submit your code - you:\n\nRun the Code Style check (i.e.¬†the lintr) with the following code & resolve any issues. If you don‚Äôt know what an error means, internet is your best friend! Also, study the lecture slides of the code styling session. Remember that you can win a full point by making sure your code styling is correct.\n\n\noefenwebTools::lintrProfile(rstudioapi::getSourceEditorContext()$path)  \n\n\nClear your environment (rm(list = ls())) and re-run your code. We won‚Äôt have anything stored in memory that is not created/retrieved in the script, therefore clearing your environment is a great way to detect any bugs that might accidentally be present.\nDon‚Äôt install packages in your code. If we need to install a package that you used, state which packages need to be installed at the beginning of your code."
  },
  {
    "objectID": "assignments/assignment-1.html#instructions",
    "href": "assignments/assignment-1.html#instructions",
    "title": "Data Visualization Assignment 1",
    "section": "",
    "text": "This is the first assignment for the Data Visualization module. The aim here is to get acquainted with the Prowise Learn data, practice with some ggplot basics, and to get you started with working with your visualizations for the final assignment.\nWith this assignment, you can gain X points, plus X bonus points. Please refer here for an overview of how we grade your data visualizations. Part A is completed, and thus also graded, individually. Part B should be completed with your assigned group. Please make sure to clearly indicate your group number and names of all group members in your submission. One person should submit the assignment on behalf of the group. If more than one person submits the group assignment, we will only look at one of them.\nThe assignment is due on Sunday October 5th, 2025 at 23:59. Submit your assignment to Canvas, under ‚ÄúDV Assignment 1‚Äù.\nYour submission for Part 1 should contain the following files:\n\nR code (style checked & working) in a .Rmd or .R file.\n\nYour (improved) version of the plot, compiled to .html or .pdf.\n\nYour interactive plot, compiled to .html or .pdf.\n\nwith file names in the following structure: DV-Assignment1-Firstname-Lastname-PartA.Rmd (or .R), DV-Assignment1-Firstname-Lastname-PartA.pdf (or .html).\nYour group submission (Part 2) should contain the following files:\n\nR code (style checked & working) in a .Rmd or .R file.\nYour plot and short description, compiled to .html or .pdf.\n\nwith file names in the following structure: DV-Assignment1-GroupX-PartB.Rmd (or .R), DV-Assignment1-GroupX-PartB.pdf (or .html).\n\n\nWe want to be able to understand and run your code. This will help us to give you a fair grade. Therefore we ask that - before you submit your code - you:\n\nRun the Code Style check (i.e.¬†the lintr) with the following code & resolve any issues. If you don‚Äôt know what an error means, internet is your best friend! Also, study the lecture slides of the code styling session. Remember that you can win a full point by making sure your code styling is correct.\n\n\noefenwebTools::lintrProfile(rstudioapi::getSourceEditorContext()$path)  \n\n\nClear your environment (rm(list = ls())) and re-run your code. We won‚Äôt have anything stored in memory that is not created/retrieved in the script, therefore clearing your environment is a great way to detect any bugs that might accidentally be present.\nDon‚Äôt install packages in your code. If we need to install a package that you used, state which packages need to be installed at the beginning of your code."
  },
  {
    "objectID": "assignments/assignment-1.html#working-with-the-oefenweb-server",
    "href": "assignments/assignment-1.html#working-with-the-oefenweb-server",
    "title": "Data Visualization Assignment 1",
    "section": "Working with the Oefenweb Server",
    "text": "Working with the Oefenweb Server\nBefore starting the assignment, please look at the handout on How to connect to the Oefenweb Server. This will help you to get started with retrieving data from the server. It also contains a useful tutorial on how to use SQL to retrieve data. Go through this code and make sure you understand it, as you will need it for this assignment."
  },
  {
    "objectID": "assignments/assignment-1.html#part-1-oefenweb-data-basic-ggplot",
    "href": "assignments/assignment-1.html#part-1-oefenweb-data-basic-ggplot",
    "title": "Data Visualization Assignment 1",
    "section": "Part 1: Oefenweb Data & Basic ggplot",
    "text": "Part 1: Oefenweb Data & Basic ggplot\nWe are now going to work with real life Oefenweb data to recreate a plot. We‚Äôll first talk you through how to get the necessary data, and then it is up to you to work some ggplot magic!\nLet‚Äôs get started by ensuring that you have all the packages installed that you will need later on.\n\n#### SET_UP ####\nknitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\n\nrm(list = ls()) # Remove any existing objects in memory\n\n\n#### REQUIREMENTS ####\n# Install Packages\n# Find everything that the user currently has installed\nall_installed_packages &lt;- installed.packages()[, \"Package\"]\n# Install any missing, but required packages\n# nolint start -- trick to omit some lines from the lintr checker, only if you have a good reason!\nif (!\"tidyverse\" %in% all_installed_packages) {install.packages(\"tidyverse\")}\nif (!\"devtools\" %in% all_installed_packages) {install.packages(\"devtools\")}\nif (!\"oefenwebDatabase\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-database\")}\nif (!\"oefenwebTools\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-tools\")}\nif (!\"jsonlite\" %in% all_installed_packages) {install.packages(\"jsonlite\")}\n# nolint end\n\n# Load Required Packages\nlibrary(tidyverse)\nlibrary(oefenwebDatabase)\nlibrary(oefenwebTools)\nlibrary(jsonlite)\n\nWe now have everything we need to let our online R Studio environment know how to ‚Äúcommunicate‚Äù with our Data Server. We can connect with the database by using the following code. This creates a connection to the database that is stored in the variable con.\n\ncon &lt;- oefenwebDatabase::connect()\ndata &lt;- DBI::dbGetQuery(con,\n                        \"SELECT id, login_count, new_school_id, grade\n                         FROM users\n                         WHERE id IN\n                            (SELECT new_user_id \n                             FROM school_classes_users \n                             WHERE new_school_class_id = 3)\")\n\nFrom this point on, you can use the database connection to retrieve data from the server. What the data actually looks like, and which tables/columns are available can be viewed on the Adminer. Log in with the your Oefenweb username and password, and select oefenweb_nl_app from the databases.\nWe can, for example, use the following SQL statement to retrieve the domains table:\n\n# select all columns (*) from the domains table.\nmy_data_domains &lt;-\n  DBI::dbGetQuery(con, # the connection element to our database\n                  \"SELECT * FROM `domains`\")\n\nYou will receive warnings that let you know how data has been parsed. You can ignore these, or even better suppress them ;)\n\nmy_data_domains &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT * FROM `domains`\"))\n\n\nA. Replicate this plot\nNow lets get some item data. In the items table we can find data that contains item information as for example the item question or answer options. We will choose the domain tafels (Multiplication Tables). In the items table we can see that there is no mention of ‚Äútafels‚Äù anywhere, however, each item does have a domain_id listed. If we look in the domains table we just retrieved, we see that tafels has the id ‚Äò59‚Äô. We can use this information to retrieve only the items from the tafels game:\n\nitems &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT *\n                                    FROM `items`\n                                    WHERE `domain_id` = '59'\"))\n\nNow we manipulate the data and create some new variables that we will need later on. First we convert the continuous variable maximum_response_in_seconds (the total amount of time allowed per item) and turn it into a categorical factor:\n\nitems$maximum_response_in_seconds &lt;- factor(items$maximum_response_in_seconds,\n                                            levels = c(5, 10, 15, 20),\n                                            labels = c(\"5 seconds\",\n                                                       \"10 seconds\",\n                                                       \"15 seconds\",\n                                                       \"20 seconds\"))\n\nThen, we want to know what the actual answer was to a question. Unfortunately, we store question and answer/answer_options data in the format of a JSON string. We thus need to clean the JSON before we can retrieve the answers:\n\n# Create a new variable where we will store the result\nitems$answer &lt;- numeric(nrow(items))\n\n# Loop over each row to clean the content (you could also use an apply function)\nfor (i in seq_len(nrow(items))) {\n  items$answer[i] &lt;-\n    as.numeric(jsonlite::fromJSON(items$answer_options[i])$answerOptions)\n}\n\nWe now have a column answer that has the cleaned, numeric, outcome for each question/item. We can use this to create another categorical variable:\n\n# Now we determine whether the answer is below or above 50\nitems$answer_result &lt;- items$answer &lt;= 50\n\n# Finally we make answer_result also a categorical factor variable\nitems$answer_result &lt;- factor(items$answer_result, levels = c(TRUE, FALSE),\n                              labels = c(\"equal to or below 50\", \"above 50\"))\n\nOk, now we are ready to make a plot. We will plot the item deadline (maximum_response_time_in_seconds) on the x-axis and the item difficulty (rating) on the y-axis. We group the items into a group with answer equal to or below 50 and above 50.\nThe assignment is for you to reproduce the following visualization (or make it even better):\n\n\nGrading:\n\nDoes the data show the same pattern? [1.5 pt]\nIs the styling the same? [1.5 pt]\nBONUS: Where there extra features added? [0.5 pt]\nDid the code run? [0.5 pt]\nWere styling issues resolved? (lintr) [0.5 pt]\n\nPlease note that you will only receive bonus points if your extra features are meaningful and improve the visualization. Simply changing colors or themes will not be rewarded, unless you can motivate why your changes are an improvement.\nWhen you are done, please close the connection to the database:\n\noefenwebDatabase::close_connections()\n\n\n\nB. Interactive visualizations with Plotly"
  },
  {
    "objectID": "assignments/assignment-1.html#part-2-group",
    "href": "assignments/assignment-1.html#part-2-group",
    "title": "Data Visualization Assignment 1",
    "section": "Part 2: Group",
    "text": "Part 2: Group\n\nA. Choose a research question\n\n\nB."
  },
  {
    "objectID": "assignments/working-on-the-server.html",
    "href": "assignments/working-on-the-server.html",
    "title": "Working on the Oefenweb Server",
    "section": "",
    "text": "In this tutorial, we will learn how to work on the Oefenweb server. The server contains real data from Prowise Learn, which you can use to create visualizations. You will need to connect properly to the server in order to access the data and complete the assignments in the Data Visualization modules.\n\nStep 1: Connect to the server\nYou will have signed the GDPR form, and received log-in credentials for the server in an earlier module of this course. Use the same credentials to log in to the data visualization server: https://data-visualization.oefenweb.nl/rstudio/auth-sign-in.\n\nSetup your environment\nWhen working with RMarkdown, start with a setup chunk. This allows you to change settings for all code chunks in your document. Any chunk settings you set here can be overridden in individual chunks later on. It is also good practice to clear your environment at the start of your script, to avoid any conflicts with existing objects in memory.\n\nknitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\n\nrm(list = ls()) # Remove any existing objects in memory\n\n\n\nInstall necessary packages\nLet‚Äôs get started by ensuring that you have all the packages installed that you will need later on.\n\n# Install Packages\n# Find everything that the user currently has installed\nall_installed_packages &lt;- installed.packages()[, \"Package\"]\n# Install any missing, but required packages\n# nolint start -- trick to omit some lines from the lintr checker, only if you have a good reason!\nif (!\"tidyverse\" %in% all_installed_packages) {install.packages(\"tidyverse\")}\nif (!\"devtools\" %in% all_installed_packages) {install.packages(\"devtools\")}\nif (!\"oefenwebDatabase\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-database\")}\nif (!\"oefenwebTools\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-tools\")}\nif (!\"jsonlite\" %in% all_installed_packages) {install.packages(\"jsonlite\")}\n# nolint end\n\n# Load Required Packages\nlibrary(tidyverse)\nlibrary(oefenwebDatabase)\nlibrary(oefenwebTools)\nlibrary(jsonlite)\n\n\n\nMake a connection to the server\nWe now have everything we need to let our online R Studio environment know how to ‚Äúcommunicate‚Äù with our Data Server. We can connect with the database by using the following code. This creates a connection to the database that is stored in the variable con.\n\ncon &lt;- oefenwebDatabase::connect()\n# Always run this code in the console; do not leave this line in your script!\n\n\n\n\nStep 2: Retrieve data from the server\n\nRetrieve data with an SQL query\n\ndata &lt;- DBI::dbGetQuery(con,\n                        \"SELECT id, login_count, new_school_id, grade\n                         FROM users\n                         WHERE id IN\n                            (SELECT new_user_id \n                             FROM school_classes_users \n                             WHERE new_school_class_id = 3)\")\n\nFrom this point on, you can use the database connection to retrieve data from the server. What the data actually looks like, and which tables/columns are available can be viewed on the Adminer. Log in with the your Oefenweb username and password, and select oefenweb_nl_app from the databases.\nWe can, for example, use the following SQL statement to retrieve the domains table:\n\n# select all columns (*) from the domains table.\nmy_data_domains &lt;-\n  DBI::dbGetQuery(con, # the connection element to our database\n                  \"SELECT * FROM `domains`\")\n\nYou will receive warnings that let you know how data has been parsed. You can ignore these, or even better suppress them ;)\n\nmy_data_domains &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT * FROM `domains`\"))\n\nNow lets get some item data. In the items table we can find data that contains item information as for example the item question or answer options. We will choose the domain tafels (Multiplication Tables). In the items table we can see that there is no mention of ‚Äútafels‚Äù anywhere, however, each item does have a domain_id listed. If we look in the domains table we just retrieved, we see that tafels has the id ‚Äò59‚Äô. We can use this information to retrieve only the items from the tafels game:\n\nitems &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT *\n                                    FROM `items`\n                                    WHERE `domain_id` = '59'\"))\n\nFor a review of SQL queries, see the SQL Handout from the previous module.\n\n\n\nStep 3: Manipulate the data\nNow we manipulate the data and create some new variables that we will need later on. First we convert the continuous variable maximum_response_in_seconds (the total amount of time allowed per item) and turn it into a categorical factor:\n\nitems$maximum_response_in_seconds &lt;- factor(items$maximum_response_in_seconds,\n                                            levels = c(5, 10, 15, 20),\n                                            labels = c(\"5 seconds\",\n                                                       \"10 seconds\",\n                                                       \"15 seconds\",\n                                                       \"20 seconds\"))\n\nThen, we want to know what the actual answer was to a question. Unfortunately, we store question and answer/answer_options data in the format of a JSON string. We thus need to clean the JSON before we can retrieve the answers:\n\n# Create a new variable where we will store the result\nitems$answer &lt;- numeric(nrow(items))\n\n# Loop over each row to clean the content (you could also use an apply function)\nfor (i in seq_len(nrow(items))) {\n  items$answer[i] &lt;-\n    as.numeric(jsonlite::fromJSON(items$answer_options[i])$answerOptions)\n}\n\nWe now have a column answer that has the cleaned, numeric, outcome for each question/item. We can use this to create another categorical variable:\n\n# Now we determine whether the answer is below or above 50\nitems$answer_result &lt;- items$answer &lt;= 50\n\n# Finally we make answer_result also a categorical factor variable\nitems$answer_result &lt;- factor(items$answer_result, levels = c(TRUE, FALSE),\n                              labels = c(\"equal to or below 50\", \"above 50\"))\n\n\n\nStep 4: Make a visualization\nOk, now we are ready to make a plot. We will plot the item deadline (maximum_response_time_in_seconds) on the x-axis and the item difficulty (rating) on the y-axis. We group the items into a group with answer equal to or below 50 and above 50.\n\nggplot(data = items,\n       aes(x = maximum_response_in_seconds,\n           y = rating,\n           fill = answer_result)) +\n  geom_boxplot() +\n  labs(x = \"Available Response Time\",\n       y = \"Item Rating/Difficulty\",\n       fill = \"Item Answer\")\n\n\n\nStep 5: Disconnect from the server\nWhen you are done working on the server, you need to disconnect from the database. You do this with the following code:\n\noefenwebDatabase::close_connections()\n# Always run this code in the console; do not leave this line in your script!"
  },
  {
    "objectID": "assignments/working-on-the-server.html#working-on-the-oefenweb-server",
    "href": "assignments/working-on-the-server.html#working-on-the-oefenweb-server",
    "title": "Working on the Oefenweb Server",
    "section": "",
    "text": "In this tutorial, we will learn how to work on the Oefenweb server. The server contains real data from Prowise Learn, which you can use to create visualizations. You will need to connect properly to the server in order to access this data, and complete the assignments in the Data Visualization modules.\n\n\nYou will have signed the GDPR form, and received log-in credentials for the server in an earlier module of this course. Use the same credentials to log in to the data visualization server: https://data-visualization.oefenweb.nl/rstudio/auth-sign-in.\n\n\nWhen working with RMarkdown, start with a setup chunk. This allows you to change settings for all code chunks in your document. Any chunk settings you set here can be overridden in individual chunks later on. It is also good practice to clear your environment at the start of your script, to avoid any conflicts with existing objects in memory.\n\nknitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\n\nrm(list = ls()) # Remove any existing objects in memory\n\n\n\n\n\n# Install Packages\n# Find everything that the user currently has installed\nall_installed_packages &lt;- installed.packages()[, \"Package\"]\n# Install any missing, but required packages\n# nolint start -- trick to omit some lines from the lintr checker, only if you have a good reason!\nif (!\"tidyverse\" %in% all_installed_packages) {install.packages(\"tidyverse\")}\nif (!\"devtools\" %in% all_installed_packages) {install.packages(\"devtools\")}\nif (!\"oefenwebDatabase\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-database\")}\nif (!\"oefenwebTools\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-tools\")}\nif (!\"jsonlite\" %in% all_installed_packages) {install.packages(\"jsonlite\")}\n# nolint end\n\n# Load Required Packages\nlibrary(tidyverse)\nlibrary(oefenwebDatabase)\nlibrary(oefenwebTools)\nlibrary(jsonlite)\n\n\n\n\nWe now have everything we need to let our online R Studio environment know how to ‚Äúcommunicate‚Äù with our Data Server. We can connect with the database by using the following code. This creates a connection to the database that is stored in the variable con.\n\ncon &lt;- oefenwebDatabase::connect()\n# Always run this code in the console, and do not leave this line in your script!\n\n\n\n\n\n\n\n\ndata &lt;- DBI::dbGetQuery(con,\n                        \"SELECT id, login_count, new_school_id, grade\n                         FROM users\n                         WHERE id IN\n                            (SELECT new_user_id \n                             FROM school_classes_users \n                             WHERE new_school_class_id = 3)\")\n\nFrom this point on, you can use the database connection to retrieve data from the server. What the data actually looks like, and which tables/columns are available can be viewed on the Adminer. Log in with the your Oefenweb username and password, and select oefenweb_nl_app from the databases.\nWe can, for example, use the following SQL statement to retrieve the domains table:\n\n# select all columns (*) from the domains table.\nmy_data_domains &lt;-\n  DBI::dbGetQuery(con, # the connection element to our database\n                  \"SELECT * FROM `domains`\")\n\nYou will receive warnings that let you know how data has been parsed. You can ignore these, or even better suppress them ;)\n\nmy_data_domains &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT * FROM `domains`\"))\n\nNow lets get some item data. In the items table we can find data that contains item information as for example the item question or answer options. We will choose the domain tafels (Multiplication Tables). In the items table we can see that there is no mention of ‚Äútafels‚Äù anywhere, however, each item does have a domain_id listed. If we look in the domains table we just retrieved, we see that tafels has the id ‚Äò59‚Äô. We can use this information to retrieve only the items from the tafels game:\n\nitems &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT *\n                                    FROM `items`\n                                    WHERE `domain_id` = '59'\"))\n\nFor a review of SQL queries, see the SQL Handout from the previous module.\n\n\n\n\nNow we manipulate the data and create some new variables that we will need later on. First we convert the continuous variable maximum_response_in_seconds (the total amount of time allowed per item) and turn it into a categorical factor:\n\nitems$maximum_response_in_seconds &lt;- factor(items$maximum_response_in_seconds,\n                                            levels = c(5, 10, 15, 20),\n                                            labels = c(\"5 seconds\",\n                                                       \"10 seconds\",\n                                                       \"15 seconds\",\n                                                       \"20 seconds\"))\n\nThen, we want to know what the actual answer was to a question. Unfortunately, we store question and answer/answer_options data in the format of a JSON string. We thus need to clean the JSON before we can retrieve the answers:\n\n# Create a new variable where we will store the result\nitems$answer &lt;- numeric(nrow(items))\n\n# Loop over each row to clean the content (you could also use an apply function)\nfor (i in seq_len(nrow(items))) {\n  items$answer[i] &lt;-\n    as.numeric(jsonlite::fromJSON(items$answer_options[i])$answerOptions)\n}\n\nWe now have a column answer that has the cleaned, numeric, outcome for each question/item. We can use this to create another categorical variable:\n\n# Now we determine whether the answer is below or above 50\nitems$answer_result &lt;- items$answer &lt;= 50\n\n# Finally we make answer_result also a categorical factor variable\nitems$answer_result &lt;- factor(items$answer_result, levels = c(TRUE, FALSE),\n                              labels = c(\"equal to or below 50\", \"above 50\"))\n\n\n\n\nOk, now we are ready to make a plot. We will plot the item deadline (maximum_response_time_in_seconds) on the x-axis and the item difficulty (rating) on the y-axis. We group the items into a group with answer equal to or below 50 and above 50.\n\nggplot(data = items,\n       aes(x = maximum_response_in_seconds,\n           y = rating,\n           fill = answer_result)) +\n  geom_boxplot() +\n  labs(x = \"Available Response Time\",\n       y = \"Item Rating/Difficulty\",\n       fill = \"Item Answer\")\n\n\n\n\nWhen you are done working on the server, you need to disconnect from the database. You do this with the following code:\n\noefenwebDatabase::close_connections()\n# Always run this code in the console, and do not leave this line in your script!"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "assignment-2",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "assignments/assignment-2.html#quarto",
    "href": "assignments/assignment-2.html#quarto",
    "title": "assignment-2",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "assignments/assignment-2.html#running-code",
    "href": "assignments/assignment-2.html#running-code",
    "title": "assignment-2",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BDS Toolbox: Data Visualization",
    "section": "",
    "text": "Use the navigation bar above or the links below to find everything you need for this module."
  },
  {
    "objectID": "index.html#welcome-to-bds-toolbox-data-visualization",
    "href": "index.html#welcome-to-bds-toolbox-data-visualization",
    "title": "BDS Toolbox: Data Visualization",
    "section": "",
    "text": "Use the navigation bar above or the links below to find everything you need for this module."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üìã Overview",
    "text": "üìã Overview\n\nInstructors: Abe Hofman, Lilian Ye, Annie Johansson\n\nDates: September 30th - October 12th, 2025\n\nFormat: Lectures + Tutorials\nMain Topics:\n\nEffective data visualization\n\nggplot\nGit & GitHub for collaboration\n\n\nIn this module, you will learn a wide set of data visualisation tools for both static and interactive visualizations. We will also focus on why you should look at your data and what makes a good visualization. You will have access to rich data from the Prowise Servers, to design visualizations from."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üóìÔ∏è Schedule",
    "text": "üóìÔ∏è Schedule\n\n\n\n\nWhen\n\n\nWhere\n\n\nTopic\n\n\nPrepare\n\n\nDuring Tutorial\n\n\n\n\nTuesday 30/9 15.00-18.00\n\n\nGS.11\n\n\nGood and Bad Plots / ggplot Basics\n\n\nRead: DV ch.¬†1 Watch video: Fundamentals of Data VisualizationOptional: Review ggplot basics in DV ch.¬†3\n\n\nKick-off quizWork on Assignment 1\n\n\n\n\nFriday 3/10 12.30-15.30\n\n\nJKB.25\n\n\nInteractive Plots\n\n\n\n\nKick-off quizWork on Assignment 1\n\n\n\n\nDeadline DV Assignment 1 ‚Äì Sunday 5/9 23.59\n\n\n\n\nTuesday 7/10 15.00-18.00\n\n\nGS.11\n\n\nBetter Plots\n\n\nRead: DV Book ch.¬†3.7, 4.3, 5.3, 5.5, 5.6, 6.0, 6.1, 6.2, 8.1, 8.2, 8.3Watch videos: Themes, Recycling themes, Trend lines / stats, Color scheme, Multiple plots, Facets, Saving plots\n\n\n\n\n\n\nFriday 10/10 12.30-15.30\n\n\nJKB.25\n\n\nQ&A Session\n\n\nData Visualizations - First Draft Due\n\n\nWork on Assignment 2Peer Review\n\n\n\n\nDeadline DV Assignment 2 ‚Äì Sunday 12/9 23.59"
  },
  {
    "objectID": "index.html#quick-links",
    "href": "index.html#quick-links",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üîó Quick links",
    "text": "üîó Quick links\nLecture Slides\nBrowse the GitHub repository"
  },
  {
    "objectID": "index.html#assignments",
    "href": "index.html#assignments",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üìù Assignments",
    "text": "üìù Assignments\nAssignment 1\nAssignment 2\nSubmit both assignments to canvas. Assignment 2 should also be submitted to this site, via a GitHub pull request. Instructions for this can be found on the GitHub landing page. ‚Äî"
  },
  {
    "objectID": "index.html#how-to-use-this-site",
    "href": "index.html#how-to-use-this-site",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üí° How to Use This Site",
    "text": "üí° How to Use This Site\n\nBrowse the slides before and after class.\n\nAccess the assignments.\n\nPractice workflows with Git. If you are interested in how to setup a GitHub repository and work with Quarto documents, you can clone the repository and explore the files on your own computer."
  }
]