[
  {
    "objectID": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html",
    "href": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html",
    "title": "BDS Toolbox: DV Assignment 1 Part 1",
    "section": "",
    "text": "Use this template to help you get started with your assignment. You can add more code chunks as needed. After knitting, a .html document will be generated in the same folder as this .Rmd file. You should download both documents (.Rmd and .html) from the server and submit them following the instructions on the assignment.\nSome tips if you encounter knitting issues:\nIf you make more than one visualization per part, please indicate clearly which visualization we should look at when grading."
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#setup-environment",
    "href": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#setup-environment",
    "title": "BDS Toolbox: DV Assignment 1 Part 1",
    "section": "Setup environment",
    "text": "Setup environment\n\nknitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\nrm(list = ls()) # Remove any existing objects in memory"
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#a.-replicate-this-plot",
    "href": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#a.-replicate-this-plot",
    "title": "BDS Toolbox: DV Assignment 1 Part 1",
    "section": "A. Replicate this plot",
    "text": "A. Replicate this plot\n\nLibraries and database connection\n\n# Install Packages\n# Find everything that the user currently has installed\nall_installed_packages &lt;- installed.packages()[, \"Package\"]\n# Install any missing, but required packages\n# nolint start -- trick to omit some lines from the lintr checker, only if you have a good reason!\nif (!\"tidyverse\" %in% all_installed_packages) {install.packages(\"tidyverse\")}\nif (!\"devtools\" %in% all_installed_packages) {install.packages(\"devtools\")}\nif (!\"oefenwebDatabase\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-database\")}\nif (!\"oefenwebTools\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-tools\")}\nif (!\"jsonlite\" %in% all_installed_packages) {install.packages(\"jsonlite\")}\nif (!\"ggplot2\" %in% all_installed_packages) {install.packages(\"ggplot2\")}\nif (!\"cowplot\" %in% all_installed_packages) {install.packages(\"cowplot\")}\n# nolint end\n\n# Load Required Packages\nlibrary(tidyverse)\nlibrary(oefenwebDatabase)\nlibrary(oefenwebTools)\nlibrary(jsonlite)\nlibrary(cowplot)\nlibrary(ggplot2)\n\n# make database connection\ncon &lt;- oefenwebDatabase::connect()"
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#a.-replicate-this-plot-1",
    "href": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#a.-replicate-this-plot-1",
    "title": "BDS Toolbox: DV Assignment 1 Part 1",
    "section": "A. Replicate this plot",
    "text": "A. Replicate this plot\n\nRetrieve data\n‚Ä¶ add more code chunks as needed. \n\n\nCreate plot"
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#b.-interactive-visualizations-with-plotly",
    "href": "templates/assignment-1/DV-Assignment1-Firstname-Lastname-PartA.html#b.-interactive-visualizations-with-plotly",
    "title": "BDS Toolbox: DV Assignment 1 Part 1",
    "section": "B. Interactive visualizations with plotly",
    "text": "B. Interactive visualizations with plotly\n\nRetrieve data\n\n\nCreate interactive plot"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BDS Toolbox: Data Visualization",
    "section": "",
    "text": "Use the navigation bar above or the links below to find everything you need for this module."
  },
  {
    "objectID": "index.html#welcome-to-bds-toolbox-data-visualization",
    "href": "index.html#welcome-to-bds-toolbox-data-visualization",
    "title": "BDS Toolbox: Data Visualization",
    "section": "",
    "text": "Use the navigation bar above or the links below to find everything you need for this module."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üìã Overview",
    "text": "üìã Overview\n\nInstructors: Abe Hofman, Lilian Ye, Annie Johansson\n\nDates: September 30th - October 12th, 2025\n\nFormat: Lectures + Tutorials\nMain Topics:\n\nEffective data visualization\n\nggplot\nGit & GitHub for collaboration\n\n\nIn this module, you will learn a wide set of data visualisation tools for both static and interactive visualizations. We will also focus on why you should look at your data and what makes a good visualization. You will have access to rich data from the Prowise Servers, to design visualizations from."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üóìÔ∏è Schedule",
    "text": "üóìÔ∏è Schedule\n\n\n\n\nWhen\n\n\nWhere\n\n\nTopic\n\n\nPrepare\n\n\nDuring Tutorial\n\n\n\n\nTuesday 30/9 15.00-18.00\n\n\nGS.11\n\n\nGood and Bad Plots / ggplot Basics\n\n\nRead: DV ch.¬†1 Watch video: Fundamentals of Data VisualizationOptional: Review ggplot basics in DV ch.¬†3\n\n\nKick-off quizWork on Assignment 1\n\n\n\n\nFriday 3/10 12.30-15.30\n\n\nJKB.25\n\n\nInteractive Plots\n\n\n\n\nKick-off quizWork on Assignment 1\n\n\n\n\nDeadline DV Assignment 1 ‚Äì Sunday 5/9 23.59\n\n\n\n\nTuesday 7/10 15.00-18.00\n\n\nGS.11\n\n\nBetter Plots\n\n\nRead: DV Book ch.¬†3.7, 4.3, 5.3, 5.5, 5.6, 6.0, 6.1, 6.2, 8.1, 8.2, 8.3Watch videos: Themes, Recycling themes, Trend lines / stats, Color scheme, Multiple plots, Facets, Saving plots\n\n\n\n\n\n\nFriday 10/10 12.30-15.30\n\n\nJKB.25\n\n\nQ&A Session\n\n\nData Visualizations - First Draft Due\n\n\nWork on Assignment 2Peer Review\n\n\n\n\nDeadline DV Assignment 2 ‚Äì Sunday 12/9 23.59"
  },
  {
    "objectID": "index.html#quick-links",
    "href": "index.html#quick-links",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üîó Quick links",
    "text": "üîó Quick links\nLecture Slides\nBrowse the GitHub repository"
  },
  {
    "objectID": "index.html#assignments",
    "href": "index.html#assignments",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üìù Assignments",
    "text": "üìù Assignments\nAssignment 1\nAssignment 2\nSubmit both assignments to canvas. Assignment 2 should also be submitted to this site, via a GitHub pull request. Instructions for this can be found on the GitHub landing page. ‚Äî"
  },
  {
    "objectID": "index.html#how-to-use-this-site",
    "href": "index.html#how-to-use-this-site",
    "title": "BDS Toolbox: Data Visualization",
    "section": "üí° How to Use This Site",
    "text": "üí° How to Use This Site\n\nBrowse the slides before and after class.\n\nAccess the assignments.\n\nPractice workflows with Git. If you are interested in how to setup a GitHub repository and work with Quarto documents, you can clone the repository and explore the files on your own computer."
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "DV Assignment 2 (Final Project)",
    "section": "",
    "text": "For the second and final assignment of the Data Visualization module, the challenge is to transform raw data into a clear and compelling story. Your goal is to design a visualization using the Oefenweb data that highlights meaningful patterns and provides actionable insights. To aid in this, each research question (substantiated below) is accompanied by a code chunk which gives you the relevant data. You are expected to do some data preparation and/or filtering of this data to obtain clean, reliable results. However, you are not expected to query data from other sources in the database, or perform complicated data manipulations to derive a variable ‚Äì focus on using the data given to create a sound data visualization."
  },
  {
    "objectID": "assignments/assignment-2.html#research-questions",
    "href": "assignments/assignment-2.html#research-questions",
    "title": "DV Assignment 2 (Final Project)",
    "section": "Research Questions",
    "text": "Research Questions\n\nRQ1. Which students are on track and which are not?\n\n\nExpand Instructions\n\nLevel: Analytics\n\nInstruction: Visualize the progress of the class within the four basic operation games: addition, subtraction, multiplication, division. It should be useful for the teacher; they should be able to efficiently derive which students are on track in each game and which are not. You can choose one of two ways to define progress in this context:\n\nPopulation-based approach: In the dataset, there is a variable called q_score. This is a metric which indicates how the student is performing, relative to the average performance within the same age group. For example, a q-score of 400 indicates that a child is performing equal to an average student in grade 4.\nWithin-class approach: In the dataset, there is a variable called new_user_domain_rating. This is the raw ability score of the user within the respective game. Normalize this variable for the class within each game to visualize students‚Äô performance relative to the class average.\n\n\n\nData:\n# SQL query here\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nThink about how you will deal with children who have no or little data within a specifc domain. (How) will you visualize it? Is it reliable?\nYou do not need to worry about generalizibility to other classes. It should be relevant for the teacher to say something about their students‚Äô progress within the current class.\n\n\n\n\n\n\nRQ2. What are the differences in playing behaviors between students that switch games a lot within a given session, compared to students who don‚Äôt?\n\n\nExpand Instructions\n\nLevel: Inference.\nInstruction: Define a high vs.¬†low switcher by looking at the variables n_different_games and duration. Now, choose one or more of the following variables to relate to switching behavior:\n\nmean_correct\n\nn_skip\n\nn_soft_quits\n\ndifficulty (or easy_ratio / medium_ratio / hard_ratio)\n\nmean_rt\n\n\n\nData:\n# SQL query here\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nAfter defining high/low switchers, it may be useful to look at individual users to get an idea of their playing patterns, before aggregating the data further.\nHow will you filter the data to get reliable estimates of switching tendencies?\nTaking the perspective of the child playing the game, what could be an advantage of switching games often? What could be a disadvantage? Considering this perspective could help formulate your narrative.\n\n\n\n\n\n\nRQ3. How does post-error quitting differ between in-school and out-of-school practice? What might moderate these differences?\n\n\nExpand Instructions\n\nLevel: Inference\nInstruction: It is possible that students‚Äô motivation differs depending on whether they play in a classroom setting or at home ‚Äì a question which we would like you to explore in the data. One way to operationalize motivation in Prowise Learn is post-error quitting. Post-error quitting refers to whether the game was ended prematurely after an error (post_error_quit). First, define a variable which indicates whether a student is playing in or out of school:\n\nSchool times are between 8:30 and 15.00 on weekdays. Be aware of school holidays! These should be defined as out-of-school.\n\nChoose one or more of the following moderators for your final visualization:\n\ngrade\nAverage new_user_domain_q_score\n\nAverage quit (this would define whether a student generally quits a lot, regardless of errors).\n\n\n\nData:\n# SQL query here\n# delete LG sessions\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nWe have two papers dealing with post-error quitting (although not specifically dealing with this question), read them here and here for inspiration!\nYou can define errors as binary (error or correct) or sequential (n errors made in a row).\n\n\n\n\n\n\nRQ4. Can we predict how long a student will look at feedback from different student characteristics and/or play behavior?\n\n\nExpand Instructions\n\nLevel: Prediction\nInstruction: Feedback looking time indicates the time that the feedback was displayed on the screen after a student encountered an error, skipped a response, or had a time-out. Whether or not students engage with the feedback they recieve can serve as important information, both for the developers at Prowise Learn (how do users engage with application features?), and for teachers (how do students engage in their learning process?). Here, you can choose between a number of different variables to add to a regression model:\n\ntype of error (incorrect response, skipped response, time-out response). Factor this variable yourself.\ngrade\ngender\nq_score\ndifficulty\nshow_coins\nresponse_time_in_milliseconds\napplication (language vs.¬†math)\n\nYou can be selective or choose all variables. If you choose to omit certain variables, please explain why. If you differentiate between covariates and predictors, please argue your reasoning.\n\n\nData:\n# SQL query here\n# Delete LG sessions\n# Delete correct responses \n# \"Because the system automatically moves on to the next item after a correct response, we remove these responses.\"\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nSome games have explicit feedback (feedback which gives more information than right or wrong) ‚Äì check this in the variable informative_feedback. Make sure you account for this somehow.\nIt will be useful to start with an exploration about how children look at feedback. How is this variable distributed? Also examine it across games.\nFeedback looking time can be defined in a continuous manner (predicting the time looked at feedback), or categorical (can we differentiate different types of ‚Äòfeedback lookers‚Äô)? Use the results from your exploration to decide which way is most suitable to define feedback looking."
  },
  {
    "objectID": "assignments/working-on-the-server.html",
    "href": "assignments/working-on-the-server.html",
    "title": "Working on the Oefenweb Server",
    "section": "",
    "text": "In this tutorial, we will learn how to work on the Oefenweb server. The server contains real data from Prowise Learn, which you can use to create visualizations. You will need to connect properly to the server in order to access the data and complete the assignments in the Data Visualization modules.\n\nStep 1: Connect to the server\nYou will have signed the GDPR form, and received log-in credentials for the server in an earlier module of this course. Use the same credentials to log in to the data visualization server: https://data-visualization.oefenweb.nl/rstudio/auth-sign-in.\n\nSetup your environment\nWhen working with RMarkdown, start with a setup chunk. This allows you to change settings for all code chunks in your document. Any chunk settings you set here can be overridden in individual chunks later on. It is also good practice to clear your environment at the start of your script, to avoid any conflicts with existing objects in memory.\n\nknitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\n\nrm(list = ls()) # Remove any existing objects in memory\n\n\n\nInstall necessary packages\nLet‚Äôs get started by ensuring that you have all the packages installed that you will need later on.\n\n# Install Packages\n# Find everything that the user currently has installed\nall_installed_packages &lt;- installed.packages()[, \"Package\"]\n# Install any missing, but required packages\n# nolint start -- trick to omit some lines from the lintr checker, only if you have a good reason!\nif (!\"tidyverse\" %in% all_installed_packages) {install.packages(\"tidyverse\")}\nif (!\"devtools\" %in% all_installed_packages) {install.packages(\"devtools\")}\nif (!\"oefenwebDatabase\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-database\")}\nif (!\"oefenwebTools\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-tools\")}\nif (!\"jsonlite\" %in% all_installed_packages) {install.packages(\"jsonlite\")}\nif (!\"ggplot2\" %in% all_installed_packages) {install.packages(\"ggplot2\")}\nif (!\"cowplot\" %in% all_installed_packages) {install.packages(\"cowplot\")}\n# nolint end\n\n# Load Required Packages\nlibrary(tidyverse)\nlibrary(oefenwebDatabase)\nlibrary(oefenwebTools)\nlibrary(jsonlite)\nlibrary(cowplot)\nlibrary(ggplot2)\n\n\n\nMake a connection to the server\nWe now have everything we need to let our online R Studio environment know how to ‚Äúcommunicate‚Äù with our Data Server. We can connect with the database by using the following code. This creates a connection to the database that is stored in the variable con.\n\ncon &lt;- oefenwebDatabase::connect()\n# Always run this code in the console; do not leave this line in your script!\n\n\n\n\nStep 2: Retrieve data from the server\n\nRetrieve data with an SQL query\n\ndata &lt;- DBI::dbGetQuery(con,\n                        \"SELECT id, login_count, new_school_id, grade\n                         FROM users\n                         WHERE id IN\n                            (SELECT new_user_id \n                             FROM school_classes_users \n                             WHERE new_school_class_id = 3)\")\n\nFrom this point on, you can use the database connection to retrieve data from the server. What the data actually looks like, and which tables/columns are available can be viewed on the Adminer. Log in with the your Oefenweb username and password, and select oefenweb_nl_app from the databases.\nWe can, for example, use the following SQL statement to retrieve the domains table:\n\n# select all columns (*) from the domains table.\nmy_data_domains &lt;-\n  DBI::dbGetQuery(con, # the connection element to our database\n                  \"SELECT * FROM `domains`\")\n\nYou will receive warnings that let you know how data has been parsed. You can ignore these, or even better suppress them ;)\n\nmy_data_domains &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT * FROM `domains`\"))\n\nNow lets get some item data. In the items table we can find data that contains item information as for example the item question or answer options. We will choose the domain tafels (Multiplication Tables). In the items table we can see that there is no mention of ‚Äútafels‚Äù anywhere, however, each item does have a domain_id listed. If we look in the domains table we just retrieved, we see that tafels has the id ‚Äò59‚Äô. We can use this information to retrieve only the items from the tafels game:\n\nitems &lt;-\n  suppressWarnings(DBI::dbGetQuery(con,\n                                   \"SELECT *\n                                    FROM `items`\n                                    WHERE `domain_id` = '59'\"))\n\nFor a review of SQL queries, see the SQL Handout from the previous module.\n\n\n\nStep 3: Manipulate the data\nNow we manipulate the data and create some new variables that we will need later on. First we convert the continuous variable maximum_response_in_seconds (the total amount of time allowed per item) and turn it into a categorical factor:\n\nitems$maximum_response_in_seconds &lt;- factor(items$maximum_response_in_seconds,\n                                            levels = c(5, 10, 15, 20),\n                                            labels = c(\"5 seconds\",\n                                                       \"10 seconds\",\n                                                       \"15 seconds\",\n                                                       \"20 seconds\"))\n\nThen, we want to know what the actual answer was to a question. Unfortunately, we store question and answer/answer_options data in the format of a JSON string. We thus need to clean the JSON before we can retrieve the answers:\n\n# Create a new variable where we will store the result\nitems$answer &lt;- numeric(nrow(items))\n\n# Loop over each row to clean the content (you could also use an apply function)\nfor (i in seq_len(nrow(items))) {\n  items$answer[i] &lt;-\n    as.numeric(jsonlite::fromJSON(items$answer_options[i])$answerOptions)\n}\n\nWe now have a column answer that has the cleaned, numeric, outcome for each question/item. We can use this to create another categorical variable:\n\n# Now we determine whether the answer is below or above 50\nitems$answer_result &lt;- items$answer &lt;= 50\n\n# Finally we make answer_result also a categorical factor variable\nitems$answer_result &lt;- factor(items$answer_result, levels = c(TRUE, FALSE),\n                              labels = c(\"equal to or below 50\", \"above 50\"))\n\n\n\nStep 4: Make a visualization\nOk, now we are ready to make a plot. We will plot the item deadline (maximum_response_time_in_seconds) on the x-axis and the item difficulty (rating) on the y-axis. We group the items into a group with answer equal to or below 50 and above 50.\n\nggplot(data = items,\n       aes(x = maximum_response_in_seconds,\n           y = rating,\n           fill = answer_result)) +\n  geom_boxplot() +\n  labs(x = \"Available Response Time\",\n       y = \"Item Rating/Difficulty\",\n       fill = \"Item Answer\")\n\n\n\nStep 5: Disconnect from the server\nWhen you are done working on the server, you need to disconnect from the database. You do this with the following code:\n\noefenwebDatabase::close_connections()\n# Always run this code in the console; do not leave this line in your script!"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Data Visualization Assignment 1",
    "section": "",
    "text": "Download the templates for this assignment in the Github Repository (templates &gt; assignment-1).\nThis is the first assignment for the Data Visualization module. The aim here is to get acquainted with the Prowise Learn data, practice with some ggplot basics, and to get you started with working with your visualizations for the final assignment.\nWith this assignment, you can gain X points, plus X bonus points. Please refer here for an overview of how we grade your data visualizations. Part 1 is completed, and thus also graded, individually. Part 2 should be completed with your assigned group. Please make sure to clearly indicate your group number and names of all group members in your submission. One person should submit the assignment on behalf of the group. If more than one person submits the group assignment, we will only look at one of them.\nThe assignment is due on Sunday October 5th, 2025 at 23:59. Submit your assignment to Canvas, under ‚ÄúDV Assignment 1‚Äù.\nYour submission for Part 1 should contain the following files:\n\nR code (style checked & working) in a .Rmd file\n\nYour assignment, including both the replicated plot and the interactive plot, compiled to .html\n\nwith file names in the following structure: DV-Assignment1-Firstname-Lastname-PartA.Rmd and DV-Assignment1-Firstname-Lastname-PartA.html.\nYour group submission (Part 2) should contain the following files:\n\nR code (style checked & working) in a .Rmd\n\nYour plot and short description, compiled to .html\n\nwith file names in the following structure: DV-Assignment1-GroupX-PartB.Rmd (or .R), DV-Assignment1-GroupX-PartB.pdf (or .html). When uploading an html file, make sure that it can be opened and the plots are readable. We will not compile the html for you!\n\n\nWe want to be able to understand and run your code. This will help us to give you a fair grade. Therefore we ask that - before you submit your code - you:\n\nRun the Code Style check (i.e.¬†the lintr) with the following code & resolve any issues. If you don‚Äôt know what an error means, internet is your best friend! Also, study the lecture slides of the code styling session. Remember that you can win a full point by making sure your code styling is correct.\n\n\noefenwebTools::lintrProfile(rstudioapi::getSourceEditorContext()$path)  \n\n\nClear your environment (rm(list = ls())) and re-run your code. We won‚Äôt have anything stored in memory that is not created/retrieved in the script, therefore clearing your environment is a great way to detect any bugs that might accidentally be present.\nDon‚Äôt install packages in your code. If we need to install a package that you used, state which packages need to be installed at the beginning of your code."
  },
  {
    "objectID": "assignments/assignment-1.html#instructions",
    "href": "assignments/assignment-1.html#instructions",
    "title": "Data Visualization Assignment 1",
    "section": "",
    "text": "Download the templates for this assignment in the Github Repository (templates &gt; assignment-1).\nThis is the first assignment for the Data Visualization module. The aim here is to get acquainted with the Prowise Learn data, practice with some ggplot basics, and to get you started with working with your visualizations for the final assignment.\nWith this assignment, you can gain X points, plus X bonus points. Please refer here for an overview of how we grade your data visualizations. Part 1 is completed, and thus also graded, individually. Part 2 should be completed with your assigned group. Please make sure to clearly indicate your group number and names of all group members in your submission. One person should submit the assignment on behalf of the group. If more than one person submits the group assignment, we will only look at one of them.\nThe assignment is due on Sunday October 5th, 2025 at 23:59. Submit your assignment to Canvas, under ‚ÄúDV Assignment 1‚Äù.\nYour submission for Part 1 should contain the following files:\n\nR code (style checked & working) in a .Rmd file\n\nYour assignment, including both the replicated plot and the interactive plot, compiled to .html\n\nwith file names in the following structure: DV-Assignment1-Firstname-Lastname-PartA.Rmd and DV-Assignment1-Firstname-Lastname-PartA.html.\nYour group submission (Part 2) should contain the following files:\n\nR code (style checked & working) in a .Rmd\n\nYour plot and short description, compiled to .html\n\nwith file names in the following structure: DV-Assignment1-GroupX-PartB.Rmd (or .R), DV-Assignment1-GroupX-PartB.pdf (or .html). When uploading an html file, make sure that it can be opened and the plots are readable. We will not compile the html for you!\n\n\nWe want to be able to understand and run your code. This will help us to give you a fair grade. Therefore we ask that - before you submit your code - you:\n\nRun the Code Style check (i.e.¬†the lintr) with the following code & resolve any issues. If you don‚Äôt know what an error means, internet is your best friend! Also, study the lecture slides of the code styling session. Remember that you can win a full point by making sure your code styling is correct.\n\n\noefenwebTools::lintrProfile(rstudioapi::getSourceEditorContext()$path)  \n\n\nClear your environment (rm(list = ls())) and re-run your code. We won‚Äôt have anything stored in memory that is not created/retrieved in the script, therefore clearing your environment is a great way to detect any bugs that might accidentally be present.\nDon‚Äôt install packages in your code. If we need to install a package that you used, state which packages need to be installed at the beginning of your code."
  },
  {
    "objectID": "assignments/assignment-1.html#working-with-the-oefenweb-server",
    "href": "assignments/assignment-1.html#working-with-the-oefenweb-server",
    "title": "Data Visualization Assignment 1",
    "section": "Working with the Oefenweb Server",
    "text": "Working with the Oefenweb Server\nBefore starting the assignment, please look at the handout on How to connect to the Oefenweb Server. This will help you to get started with retrieving data from the server. It also contains a useful tutorial on how to use SQL to retrieve data. Go through this code and make sure you understand it, as you will need it for this assignment."
  },
  {
    "objectID": "assignments/assignment-1.html#part-1-oefenweb-data-basic-ggplot-individual",
    "href": "assignments/assignment-1.html#part-1-oefenweb-data-basic-ggplot-individual",
    "title": "Data Visualization Assignment 1",
    "section": "Part 1: Oefenweb Data & Basic ggplot (Individual)",
    "text": "Part 1: Oefenweb Data & Basic ggplot (Individual)\n\nA. Replicate this plot\nThe following code will give you the data necessary to create the plot at the end of this section. Your task is to replicate the plot using ggplot2.\nDon‚Äôt worry if you cannot reproduce the plots exactly. You can, for example, use different colors and font families.\nGrading:\n\nDoes the data show the same pattern? [1.5 pt]\nIs the styling the same? [1.5 pt]\nBONUS: Where there extra features added? [1 pt]\nDid the code run? [0.5 pt]\nWere styling issues resolved? (lintr) [0.5 pt]\n\nBonus points\nCan you spot any areas where this plot can be improved? 1 extra point will be awarded for changes made, or features added or removed to the visualization. They need to be meaningful and improve the visualization. Simply changing colors or themes will not be rewarded, unless you can motivate why your changes are an improvement.\n\nknitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\nrm(list = ls()) # Remove any existing objects in memory\n\n\n# Install Packages\n# Find everything that the user currently has installed\nall_installed_packages &lt;- installed.packages()[, \"Package\"]\n# Install any missing, but required packages\n# nolint start -- trick to omit some lines from the lintr checker, only if you have a good reason!\nif (!\"tidyverse\" %in% all_installed_packages) {install.packages(\"tidyverse\")}\nif (!\"devtools\" %in% all_installed_packages) {install.packages(\"devtools\")}\nif (!\"oefenwebDatabase\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-database\")}\nif (!\"oefenwebTools\" %in% all_installed_packages) {devtools::install_github(repo = \"Oefenweb/r-tools\")}\nif (!\"jsonlite\" %in% all_installed_packages) {install.packages(\"jsonlite\")}\nif (!\"ggplot2\" %in% all_installed_packages) {install.packages(\"ggplot2\")}\nif (!\"cowplot\" %in% all_installed_packages) {install.packages(\"cowplot\")}\n# nolint end\n\n# Load Required Packages\nlibrary(tidyverse)\nlibrary(oefenwebDatabase)\nlibrary(oefenwebTools)\nlibrary(jsonlite)\nlibrary(cowplot)\nlibrary(ggplot2)\n\n# make database connection\ncon &lt;- oefenwebDatabase::connect()\n\nFor this assignment, we will have a look at the two items of the same domain. First we have to get the items from the items table and after that we obtain the log_records of these items.\n\nitem_ids &lt;- c(188391, 186408)\n\nitems &lt;- suppressWarnings(DBI::dbGetQuery(con, paste0(\"SELECT *\n                              FROM `items`\n                              WHERE id IN (\", paste(item_ids, collapse = \",\"), \")\")))\n\n# renaming first column of items data.frame to \"item_id\"\ncolnames(items)[1] &lt;- \"item_id\"\n\n# obtaining the log_records for the two items of the visualization\n# in this example R code is used \"within\" a SQL query\nitemsLogs &lt;- suppressWarnings(DBI::dbGetQuery(con, paste0(\"SELECT *\n                                                        FROM `log_records_2`\n                                                        WHERE `item_id` IN (\",\n                                                        paste(c(items$item_id), collapse = \", \"), \")\")))\n\nNow that we have the ‚Äúraw‚Äù data, we can start to filter and prepare it for the visualization we want to build.\n\n# make the question and answer_options \"json\" free\nfor (i in 1:nrow(items)) {\n  items$correct_answer[i] &lt;- jsonlite::fromJSON(items$answer_options[i])$answerOptions[1]\n  items$question[i] &lt;- jsonlite::fromJSON(items$question[i])$question$content\n}\n\n# we do a left_join between itemLogs and items table to get the item question and correct_answer into itemsLogs\nitemsLogs &lt;- dplyr::left_join(itemsLogs,\n                              items[, c(\"item_id\", \"question\", \"correct_answer\")],\n                              by = \"item_id\")\n\nLet‚Äôs do some further data preparations. We prefer to change the data instead of changing labels in the plot. If you change the data, the plot and data will resemble each other, hence you can be more certain that you don‚Äôt have errors in your visualization.\n\n# transform variables to suitable types\nitemsLogs$response_in_seconds &lt;- itemsLogs$response_in_milliseconds / 1000\nitemsLogs$correct_answered &lt;- as.logical(itemsLogs$correct_answered)\nitemsLogs$question &lt;- factor(itemsLogs$question)\n\n# make answer column\nitemsLogs$given_answer_type &lt;- NA\nfor (i in 1:nrow(itemsLogs)) {\n  if (itemsLogs$correct_answered[i]) {\n    itemsLogs$given_answer_type[i] &lt;- \"correct\"\n  } else {\n    itemsLogs$given_answer_type[i] &lt;- \"incorrect\"\n    if (itemsLogs$answer[i] == \"¬ø\") {\n      itemsLogs$given_answer_type[i] &lt;- \"questionmark\"\n    }\n  }\n}\nitemsLogs$given_answer_type &lt;- factor(itemsLogs$given_answer_type)\n\nBefore we continue we get the grade information from the users table, add this info, do some filtering and change it to a factor:\n\nusers &lt;- DBI::dbGetQuery(con, \"SELECT id AS new_user_id, grade FROM users\")\nitemsLogs &lt;- dplyr::left_join(itemsLogs, users, by = \"new_user_id\")\n\n# filter (with dplyr) to only work with grade 3 to 8\nitemsLogs &lt;- itemsLogs %&gt;%\n  filter(grade %in% c(3:8)) %&gt;%\n  as.data.frame()\n\nitemsLogs$grade &lt;- factor(itemsLogs$grade, levels = c(3:8), labels = paste0(\"Grade \", c(3:8)))\n\nNow we can make the first plot. This plot shows us the relation which users (in terms of grade) practice these items. Note that for this plot we don‚Äôt use the geom_histogram function. In this case we first calculate the relative frequencies of the number of responses per grade, for each question. We store this information in a data.frame that we than use for plotting. So first make this data.frame! With geom_col() we than plot the bars.\nLook at this nice trick to add the %-symbol to the labels: scale_y_continuous(labels = function(x) paste0(x, \"%\")). I used these settings in my rMarkdown code chunk: fig.height = 4, fig.width = 6, fig.align = \"center\"\n\nFor the second plot we look into response times and given answer (correct, incorrect or questionmark). Note that you first have to make a variable with these answers (correct, incorrect, question-mark). I used these settings in my rMarkdown code chunk: fig.height = 4, fig.width = 6, fig.align = \"center\"\n\nFinally we make a plot with text to have some more information in our visualization. I used these settings in my rMarkdown code chunk: fig.height = 2, fig.width = 10, fig.align = \"center\"\n Finally we combine the three plots (one text plot and two figure plots) into one plot by means of the plot_grid function of the cowplot package. This is the visualization that you should replicate in this assignment Part II.\nI used these settings in my rMarkdown code chunk: fig.height = 8, fig.width = 10, fig.align = \"center\"\n Tips:\n\nOn plot 1 there is text on the third facet which does not use the default font family\n\nTo select nice colors go to http://colorbrewer2.org [or tips on the Data Visualisation slides]\nGoogle (or other search engines) are your best friend, especially on stack overflow there are many questions and answers about ggplot2\n\nPlease note that you will only receive bonus points if your extra features are meaningful and improve the visualization.\nWhen you are done, please close the connection to the database (run this code in the console!):\n\noefenwebDatabase::close_connections()\n\n\n\nB. Interactive visualizations with Plotly\nCopy the code below to create a plot showcasing how a given student‚Äôs ability in Multiplication develops during their first 100 interactions with the game.\nNow, your assignment is to:\n\nMake this plot interactive using the the plotly package. Tip: You can use the ggplotly() function to convert a ggplot object to an interactive plotly object.\nAdd a tooltip that displays additional information when you hover over the plot. Customize the tooltip so that it displays the default plot values and additional insights from two other variables (choose yourself). Make sure all of this information is visible when you hover over the plot.\n\nGrading:\n\nDoes the interactive plot work? [1 pt]\nDoes the tooltip clearly display additional (meaningful) information next to the default plot values? [1 pt]\n\nFor this assignment, we will examine how the student with new_user_id = 19872 progresses through the Multiplication game. To do so, we retrieve the student‚Äôs log_records. In the query below, we also obtain additional information about the learning goals associated with the answered items to provide extra context alongside the data stored in the log_records. This is achieved by performing left joins between the log_records tables and two others: items_learning_goals (which links item_id‚Äôs to learning_goal_id‚Äôs) and learning_goals, which provides further details about the learning goals.\n\n# Load Required Packages\nlibrary(tidyverse)\nlibrary(oefenwebDatabase)\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(plotly)\n\n# if you closed your database connection already, connect to the server again:\ncon &lt;- oefenwebDatabase::connect()\n\n# get the student's log records on the Multiplication game\n# ... and additional info related to the learning goals\nmy_data &lt;- suppressWarnings(DBI::dbGetQuery(\n  con,\n  \"SELECT logs.*,\n          item_lgs.learning_goal_id,\n          lgs.short_name,\n          lgs.description,\n          lgs.position\n  FROM log_records_3 AS logs\n  LEFT JOIN items_learning_goals AS item_lgs ON item_lgs.item_id = logs.item_id\n  LEFT JOIN learning_goals AS lgs ON lgs.id = item_lgs.learning_goal_id\n  WHERE new_user_id = '19872'\"\n))\n\nWe are now ready to make the ggplot for this assignment. In this plot, we visualize how the student‚Äôs new_user_domain_rating changes as the student plays within the Multiplication game. We also add an color aesthetic to the plot that indicates for each answered item to which learning goal it belongs.\n\n# plot the student's rating development over time\nmy_plot &lt;- my_data %&gt;%\n  ggplot(\n    aes(\n      x = new_user_domain_modified_count,\n      y = new_user_domain_rating,\n      color = reorder(short_name, position) # order by \"position\" variable\n    )\n  ) +\n  geom_point(\n    size = 3,\n    alpha = .5\n  ) +\n  scale_color_viridis_d() +\n  labs(\n    title = paste0(\n      \"Development of user \",\n      unique(my_data$new_user_id),\n      \"'s ability in Multiplication\"\n    ),\n    x = \"Play count\",\n    y = \"User domain rating\",\n    color = \"Learning goal\"\n  ) +\n  theme_bw() +\n  theme(\n    plot.title = element_text(\n      face = \"bold\",\n      size = 14\n    )\n  )\n\nprint(my_plot)\n\nNow it‚Äôs your turn! Turn this static ggplot into an interactive plotly object, and add a customized tooltip that shows additional context next to the default values when you hover over the plot.\nWhen you are done, please close the connection to the database (run this code in the console!):\n\noefenwebDatabase::close_connections()"
  },
  {
    "objectID": "assignments/assignment-1.html#part-2-start-on-final-dv-project-group",
    "href": "assignments/assignment-1.html#part-2-start-on-final-dv-project-group",
    "title": "Data Visualization Assignment 1",
    "section": "Part 2: Start on Final DV Project (Group)",
    "text": "Part 2: Start on Final DV Project (Group)\n\nA. Specify your research question\nIn class 1 you indicated your preference for a research question for the final project, and were assigned a group to work with. Together with your group, read the instructions for your assigned research question in Assignment 2 again.\n\nDoes your project take an analytical, inference, or predictive approach? Is it clear what is expected in the final data visualization with regards to the approach?\n\nWho is your target audience? How might this influence choices for your final visualization?\n\n\n\nB. Connect to Git and load data\nFor this project, you will collaborate using Git. Connect your server environment to Git by following these instructions: Connecting RStudio Server to Git.\nOne person should download the template R project folder and create a new GitHub repository for your group. Add the documents inside the template folder to the repository. If this is done correctly, the resulting repository should have the following folder structure:\nyour-project-name/\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ your-project-name.Rproj\n‚îú‚îÄ‚îÄ code/\n|   ‚îî‚îÄ‚îÄ 00-load-data.R\n‚îî‚îÄ‚îÄ report/\n    ‚îî‚îÄ‚îÄ DV-Assignment2-GroupX.Rmd\n    ‚îî‚îÄ‚îÄ DV-Assignment2-GroupX.html\nThe other group members can then clone this repository to their server environment. Make a first commit and push it. Check that the other group members can pull these changes. If this works, you should be properly set up to work together using Git!\nFeel free to add folders or files within the repository if necessary. Make sure that you maintain the structure such that you follow a reproducible workflow. Additionally, it is important that you never push data to GitHub. If you have to store data, do this in a separate folder outside of your Git repository. Your .gitignore file should already contain the following lines:\n# Ignore data files\ndata/\n*.rds\n*.RDS\n*.RData\n*.rdata\n*.csv\n*.tsv\n*.xlsx\n*.rda\nThis should prevent you from accidentally pushing data files to GitHub. Still, be mindful not to add any data files to your project repository.\nNow, load in the necessary data for your visualization. The code for this is available in Assignment 2. Use the script 00-load-data.R in the code/ folder to load in the data. Examine the data. Discuss with your group:\n\nWhat is the structure of the data?\n\nWhat are the main variables? Can you already make some exploratory plots to understand these variables better?\n\nWhat data cleaning steps are necessary? Do you, for example, need to filter out some observations to obtain reliable results?\n\n\n\nC. Make your first visualization\nFor this assignment you can make any visualization about the chosen theme of the final project with these minimal requirements:\n\nuse multiple plots\nchange the theme (you can use a default theme or create your own)\nuse a good color-scheme, for example colorblind proof\nhighlight some interesting data points, for example using color or text\n\nInclude a description of what you want to communicate, and how you did that. Really work towards making a data visualization that highlights or substantiates a single conclusion. This plot does not have to be the plot for your final project (it probably is not), but use this assignment to get feedback from us on your current ideas.\nGrading:\n\nAesthetics\n\nIs the plot legible? [1pt]\nDo the colors add to the interpretability? [1pt]\nIs the plot simple? [0.5 pt]\n\nCommunication\n\nIs it clear what the plots tries to communicate? [1pt]\nDoes the plot communicate the described conclusions/description? [1pt]\nThe plot requires minimal explanation [0.5 pt]\n\nCreative/complexity\n\nIs the plot creative? [0.5 pt]\nIs the plot/analysis complex? [0.5 pt]\n\n\nClearly state your group members in your document. And please make sure ONE team member submits the assignment on behalf of the group."
  },
  {
    "objectID": "slides/slides.html#welcome-to-the-bds-toolbox-module-data-visualization",
    "href": "slides/slides.html#welcome-to-the-bds-toolbox-module-data-visualization",
    "title": "Data Visualization",
    "section": "Welcome to the BDS Toolbox module Data Visualization! üëã",
    "text": "Welcome to the BDS Toolbox module Data Visualization! üëã\n\n\n\nFind everything you need for this module on the website:data-visualization-2025\n\n\n\n\n\ncover photo made in R by Danielle Navarro\n\n\n\n\nSlides made using quarto"
  },
  {
    "objectID": "slides/slides.html#schedule",
    "href": "slides/slides.html#schedule",
    "title": "Data Visualization",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\n\nWhen\nWhat\nPrepare\nTutorial\n\n\n\n\nTuesday, 30/09\n15.00 - 18.00\nData Visualization Session 1\nGood and bad plots\nggplot basics\n[Read] DV book ch.¬†1, 3\n[Watch videos] Fundamentals of Data Visualization\nKick-off quiz\n\n\nFriday, 03/10\n12.30 - 15.30\n\n\nData Visualization Session 2\nBetter plots\n[Read] DV Book ch.¬†3.7, 4.3, 5.3, 5.5, 5.6, 6.0, 6.1, 6.2, 8.1, 8.2, 8.3\n[Watch videos] Themes, Recycling Themes, Trend lines / Stats, Color scheme, Multiple plots, Facets, Saving plots\nKick-off quiz\nWork on Data Visualization Assignment 1\n\n\nTuesday, 07/10\n15.00 - 18.00\nData Visualization Session 3\nIntroduction to final assignment\n\nData Visualization Assignment 2\n\n\nFriday, 10/10,\n12.30 - 15.30\nQ&A\n\nWork on Final Assignment"
  },
  {
    "objectID": "slides/slides.html#assignments",
    "href": "slides/slides.html#assignments",
    "title": "Data Visualization",
    "section": "Assignments",
    "text": "Assignments\n\n\n\n\n\n\nAssignment 1\n\nPart A alone, part B with your group.\nX% of the grade\n\n\n\nAssignment 2\n\nYour final data visualization project.\nWork with your group.\nX% of the grade"
  },
  {
    "objectID": "slides/slides.html#deadlines",
    "href": "slides/slides.html#deadlines",
    "title": "Data Visualization",
    "section": "Deadlines",
    "text": "Deadlines\n\nAssignment 1 ‚Äì Sunday 5/10 23.59\nFirst draft of Assignment 2 ‚Äì Friday 10/10 12.30\nPeer review of Assignment 2 ‚Äì Friday 10/10 23.59\nAssignment 2 ‚Äì Sunday 12/10 23.59"
  },
  {
    "objectID": "slides/slides.html#materials",
    "href": "slides/slides.html#materials",
    "title": "Data Visualization",
    "section": "Materials",
    "text": "Materials\n\n\n\n\n\n\n\n\n\nr4ds.had.co.nz\n\n\n\n\n\n\n\nsocviz.co\n\n\n\n\n\n\n\nVideos on canvas\n\n\n\n\n\n\nHelpful extra resources\n\nClaus Wilke: Fundamentals of Data Viz\nhttps://psyteachr.github.io/introdataviz/plotstyle.html"
  },
  {
    "objectID": "slides/slides.html#today",
    "href": "slides/slides.html#today",
    "title": "Data Visualization",
    "section": "Today",
    "text": "Today\n‚ùì Quiz\nüìä What makes a plot good (and bad)?\nü™Ñ Guiding principles"
  },
  {
    "objectID": "slides/slides.html#quiz",
    "href": "slides/slides.html#quiz",
    "title": "Data Visualization",
    "section": "Quiz!",
    "text": "Quiz!\nhttps://canvas.uva.nl/courses/54361/quizzes"
  },
  {
    "objectID": "slides/slides.html#section",
    "href": "slides/slides.html#section",
    "title": "Data Visualization",
    "section": "üí¨",
    "text": "üí¨\nWhy visualize data?"
  },
  {
    "objectID": "slides/slides.html#anscombes-quartet",
    "href": "slides/slides.html#anscombes-quartet",
    "title": "Data Visualization",
    "section": "Anscombe‚Äôs quartet",
    "text": "Anscombe‚Äôs quartet\n\n\n \n\n\n\nCode\nlibrary(\"datasauRus\")\ndatasaurus_dozen %&gt;% \n  ggplot2::ggplot(aes(x = x, y = y, color = dataset)) +\n  ggplot2::geom_point() +\n  ggplot2::theme_void() +\n  ggplot2::geom_smooth(method = \"lm\", color = \"gray\", fill = \"gray\", alpha = .5) +\n  ggplot2::theme(legend.position = \"none\", text = element_text(size = 30)) +\n  ggplot2::facet_wrap(~dataset, ncol = 4)\n\n\n\n\n\n\n\n\n\n\n\nPackages: datasauRus, anscombiser.\nMore information: Same Stats, Different Graphs, socviz.co."
  },
  {
    "objectID": "slides/slides.html#exploratory-versus-explanatory",
    "href": "slides/slides.html#exploratory-versus-explanatory",
    "title": "Data Visualization",
    "section": "Exploratory versus explanatory",
    "text": "Exploratory versus explanatory\n\nExploratory in the sense of data exploration. Exploratory in the sense of visualization exploration (as in previous example, where the same data can be plotted in several ways). In both cases, you can create ugly plots.\nWe focus on explanatory data viz (also bridge to next). Beautiful plots!\n\n\n\n\n\n\nSource: Natalia Kiseleva\n\n\n\n\n\n\nSource: Scott McCloud\n\n\n\nExploratory: examine the structure of your data.\nExplanatory: tell a story with your data.\n\n\n\nMore resources: clauswilke.com (telling a story and making a point), susielu.com (different interpretation of exploratory/explanatory)."
  },
  {
    "objectID": "slides/slides.html#exploratory-versus-explanatory-1",
    "href": "slides/slides.html#exploratory-versus-explanatory-1",
    "title": "Data Visualization",
    "section": "Exploratory versus explanatory",
    "text": "Exploratory versus explanatory\n\n\n\n\n\n\nSource: storytellingwithdata.com\n\nMore resources: clauswilke.com (telling a story and making a point), susielu.com (different interpretation of exploratory/explanatory)."
  },
  {
    "objectID": "slides/slides.html#exploratory-versus-explanatory-2",
    "href": "slides/slides.html#exploratory-versus-explanatory-2",
    "title": "Data Visualization",
    "section": "Exploratory versus explanatory",
    "text": "Exploratory versus explanatory"
  },
  {
    "objectID": "slides/slides.html#section-3",
    "href": "slides/slides.html#section-3",
    "title": "Data Visualization",
    "section": "üí¨",
    "text": "üí¨\nWhat is more important? An eye or an algorithm?\nWhat are the consequences of overrelying on statistical techniques? What are the consequences of overrelying on visualizations?"
  },
  {
    "objectID": "slides/slides.html#what-makes-a-bad-plot-bad",
    "href": "slides/slides.html#what-makes-a-bad-plot-bad",
    "title": "Data Visualization",
    "section": "What makes a bad plot bad?",
    "text": "What makes a bad plot bad?"
  },
  {
    "objectID": "slides/slides.html#speed-dates",
    "href": "slides/slides.html#speed-dates",
    "title": "Data Visualization",
    "section": "üí¨ Speed dates",
    "text": "üí¨ Speed dates\n\n\n\nWhat do you think about this plot?\nWhat elements can be improved?\nAre there still good things with the plot?\n\n\n\n\n\nKarl Broman"
  },
  {
    "objectID": "slides/slides.html#aims",
    "href": "slides/slides.html#aims",
    "title": "Data Visualization",
    "section": "Aims",
    "text": "Aims\nYour goal is to go from exploring the Prowise data to telling a story with it.\n\nAssignment 1: Choose a research question. Explore the data and create a set of visualizations to help you understand the data.\nAssignment 2: Create a final data visualization that tells a story with the data. Compiled into a html document, and presented in the GitHub repository."
  },
  {
    "objectID": "slides/slides.html#the-data",
    "href": "slides/slides.html#the-data",
    "title": "Data Visualization",
    "section": "The data",
    "text": "The data"
  },
  {
    "objectID": "slides/slides.html#requirements",
    "href": "slides/slides.html#requirements",
    "title": "Data Visualization",
    "section": "Requirements",
    "text": "Requirements\n\nUse R and R Markdown (or Quarto) to create your visualizations.\nThe markdown document should be in the style of a report: explain your research question, and how you came to your conclusion. Not more than 1000 words.\n\nInclude at least one exploratory graph, and explain how it helped you understand the data.\nOnly your final, explanatory graph, will be graded. Clearly mark which graph this is."
  },
  {
    "objectID": "slides/slides.html#workflow",
    "href": "slides/slides.html#workflow",
    "title": "Data Visualization",
    "section": "Workflow",
    "text": "Workflow\n\nComment your code clearly. We want to understand your thought process.\nWork in the Data Visualization Server, and compile the html document there.\n\nÔ∏è‚ö† Only upload the html document to GitHub, not the R scripts and especially not any data."
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html",
    "href": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html",
    "title": "BDS Toolbox: DV Assignment 1 Part 2",
    "section": "",
    "text": "knitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\nrm(list = ls()) # Remove any existing objects in memory"
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#setup-environment",
    "href": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#setup-environment",
    "title": "BDS Toolbox: DV Assignment 1 Part 2",
    "section": "",
    "text": "knitr::opts_chunk$set(echo = TRUE) # set default echo = TRUE for all code blocks\nrm(list = ls()) # Remove any existing objects in memory"
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#a.-research-question",
    "href": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#a.-research-question",
    "title": "BDS Toolbox: DV Assignment 1 Part 2",
    "section": "A. Research question",
    "text": "A. Research question\nSpecify your research question here. It is also a good idea to take notes from your discussion of the research question and add those here."
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#b.-connect-to-git-and-load-data",
    "href": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#b.-connect-to-git-and-load-data",
    "title": "BDS Toolbox: DV Assignment 1 Part 2",
    "section": "B. Connect to Git and load data",
    "text": "B. Connect to Git and load data\nState the name of your github repository here. If you encountered issues when connecting to the server, or cloning the repository, let us know.\n\n# load packages, set up database connection\n\n\n# code to load data for your final visualization \n\nIt is a good idea to take notes from your discussion about the data, and add those here.\n\n# code to clean data for your final visualization"
  },
  {
    "objectID": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#c.-first-visualization",
    "href": "templates/assignment-1/DV-Assignment1-GroupX-PartB.html#c.-first-visualization",
    "title": "BDS Toolbox: DV Assignment 1 Part 2",
    "section": "C. First visualization",
    "text": "C. First visualization\nInclude code and a description of your first visualization here. If you have specific things you would like feedback on, you can indicate that here too.\n\n# code to produce your first visualization\n\nWe will only grade the visualization pertaining to part C. If you make exploratory visualizations in part B, feel free to include them in that section, as it may help us to understand your process. If you make more than one visualization in part C, please indicate clearly which visualization we should look at when grading."
  }
]