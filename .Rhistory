-   Are there still good things with the plot?
cars
airquality
# Load the built-in airquality dataset
data("airquality")
# Basic cleaning: remove rows with missing Ozone or Temp
cleaned <- na.omit(airquality[, c("Ozone", "Temp")])
# Plot
plot(
cleaned$Temp, cleaned$Ozone,
main = "Summer in New York: Ozone Levels Rise with Heat",
xlab = "Temperature (°F)",
ylab = "Ozone (ppb)",
pch = 19,
col = rgb(0.2, 0.4, 0.8, 0.6)
)
# Add a trend line
abline(lm(Ozone ~ Temp, data = cleaned), col = "red", lwd = 2)
# Plot
plot(
cleaned$Temp, cleaned$Ozone,
main = "Summer in New York: Ozone Levels Rise with Heat",
xlab = "Temperature (°F)",
ylab = "Ozone (ppb)",
pch = 19,
col = rgb(0.2, 0.4, 0.8, 0.6)
)
# Add a trend line
abline(lm(Ozone ~ Temp, data = cleaned), col = "red", lwd = 2)
# Load and clean data
data("airquality")
aq <- na.omit(airquality)
# Convert month numbers to labels for storytelling
aq$Month <- factor(
aq$Month,
levels = 5:9,
labels = c("May", "June", "July", "August", "September")
)
# Set up colors for months (cooler colors early summer → warmer later)
month_colors <- c("May" = "#56B1F7", "June" = "#4CC26C",
"July" = "#F4A261", "August" = "#E76F51", "September" = "#7E57C2")
# Create scatter plot
plot(
aq$Temp, aq$Ozone,
col = month_colors[aq$Month],
pch = 19,
xlab = "Temperature (°F)",
ylab = "Ozone (ppb)",
main = "Ozone Builds as Summer Heats Up (NYC, 1973)"
)
# Add a legend for months
legend("topleft", legend = levels(aq$Month), col = month_colors, pch = 19, bty = "n")
# Add a trend line
abline(lm(Ozone ~ Temp, data = aq), col = "black", lwd = 2, lty = 2)
# --- Story from a visualization perspective ---
# This plot is a seasonal narrative:
# • May and June (cool blues and greens) cluster low and left—cooler days with cleaner air.
# • July and August (warm oranges and reds) climb upward—hot, hazy days when ozone pollution spikes.
# • September’s purple dots drift lower again as summer fades.
# The dashed trend line knits these months together, revealing how rising summer heat
# steadily pushes ozone higher—a story of summer’s arc told through color, temperature, and time.
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the dataset
airquality_clean <- airquality %>%
mutate(Date = as.Date(paste(1973, Month, Day, sep = "-"))) %>%
drop_na(Ozone, Temp)  # remove rows with missing Ozone or Temp
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the dataset
airquality_clean <- airquality %>%
mutate(Date = as.Date(paste(1973, Month, Day, sep = "-"))) %>%
drop_na(Ozone, Temp)  # remove rows with missing Ozone or Temp
library(tidyverse)
# Prepare the dataset
airquality_clean <- airquality %>%
mutate(Date = as.Date(paste(1973, Month, Day, sep = "-"))) %>%
drop_na(Ozone, Temp)  # remove rows with missing Ozone or Temp
# Create the plot
ggplot(airquality_clean, aes(x = Date)) +
geom_line(aes(y = Ozone, color = "Ozone (ppb)"), size = 1) +
geom_point(aes(y = Temp, color = "Temperature (°F)"), size = 2, alpha = 0.6) +
scale_y_continuous(
name = "Ozone (ppb)",
sec.axis = sec_axis(~ ., name = "Temperature (°F)")
) +
scale_color_manual(values = c("Ozone (ppb)" = "blue", "Temperature (°F)" = "red")) +
labs(
title = "Ozone Levels and Temperature Over Summer 1973 in New York",
subtitle = "Hotter days tend to have higher ozone levels",
x = "Date",
color = ""
) +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12)
)
# Load the ggplot2 library for data visualization.
# If you don't have it installed, run install.packages("ggplot2")
library(ggplot2)
# Set a random seed for reproducibility.
# This ensures that if you run the script again, you'll get the same data.
set.seed(42)
# --- 1. GENERATE DATA FROM THREE DISTRIBUTIONS ---
# Generate 1000 data points from a Normal distribution.
# We'll use a mean of 0 and a standard deviation of 1.
normal_data <- data.frame(
value = rnorm(1000, mean = 0, sd = 1),
distribution = "Normal"
)
# Generate 1000 data points from a Uniform distribution.
# The values will be uniformly distributed between -3 and 3.
uniform_data <- data.frame(
value = runif(1000, min = -3, max = 3),
distribution = "Uniform"
)
# Generate 1000 data points from an Exponential distribution.
# We'll use a rate parameter of 0.5.
exponential_data <- data.frame(
value = rexp(1000, rate = 0.5),
distribution = "Exponential"
)
# --- 2. COMBINE THE DATA INTO A SINGLE DATA FRAME ---
# Combine all three data frames into a single one.
# This is necessary for using facet_wrap in ggplot2.
all_data <- rbind(normal_data, uniform_data, exponential_data)
# --- 3. CREATE THE GGPLOT2 VISUALIZATION ---
# Create the plot using a density plot for a smooth visual representation.
# The fill color is mapped to the "distribution" column.
ggplot(all_data, aes(x = value, fill = distribution)) +
# Use geom_density() to create a density plot, with some transparency (alpha).
geom_density(alpha = 0.7) +
# Use facet_wrap() to create a separate panel for each distribution.
# The 'scales = "free"' argument allows each panel to have its own independent x-axis scale,
# which is crucial for clearly visualizing the different distributions.
facet_wrap(~distribution, scales = "free") +
# Customize the plot titles and labels.
labs(
title = "Comparison of Different Probability Distributions",
subtitle = "Normal, Uniform, and Exponential Distributions",
x = "Value",
y = "Density"
) +
# Use a minimal theme for a clean look.
theme_minimal() +
# Further customize the theme to center the titles and remove the legend.
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
strip.text = element_text(face = "bold", size = 12) # Customize facet title text
) +
# Manually set the colors for each distribution for better visual appeal.
# The values are from a colorblind-friendly palette.
scale_fill_manual(values = c("Normal" = "#1f78b4", "Uniform" = "#33a02c", "Exponential" = "#e31a1c"))
# Create the plot using a density plot for a smooth visual representation.
# The fill color is mapped to the "distribution" column.
ggplot(all_data, aes(x = value, fill = distribution)) +
# Use geom_density() to create a density plot, with some transparency (alpha).
geom_density(alpha = 0.7) +
# Use facet_wrap() to create a separate panel for each distribution.
# The 'scales = "free"' argument allows each panel to have its own independent x-axis scale,
# which is crucial for clearly visualizing the different distributions.
facet_wrap(~distribution, scales = "free") +
# Customize the plot titles and labels.
labs(
title = "Comparison of Different Probability Distributions",
subtitle = "Normal, Uniform, and Exponential Distributions",
x = "Value",
y = "Density"
) +
# Use a minimal theme for a clean look.
theme_minimal() +
# Further customize the theme to center the titles and remove the legend.
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
strip.text = element_text(face = "bold", size = 12) # Customize facet title text
) +
# Manually set the colors for each distribution for better visual appeal.
# The values are from a colorblind-friendly palette.
scale_fill_manual(values = c("Normal" = "#1f78b4", "Uniform" = "#33a02c", "Exponential" = "#e31a1c"))
save(all_data, file = "all_data.RData") # Save the combined data frame to a file
# --- 3. CREATE THE GGPLOT2 VISUALIZATION ---
all_data <- load("all_data.RData") # Load the combined data frame from the file
# --- 3. CREATE THE GGPLOT2 VISUALIZATION ---
load("all_data.RData") # Load the combined data frame from the file
# --- 3. CREATE THE GGPLOT2 VISUALIZATION ---
load("all_data.RData") # Load the combined data frame from the file
# Create the plot using a density plot for a smooth visual representation.
# The fill color is mapped to the "distribution" column.
ggplot(all_data, aes(x = value, fill = distribution)) +
# Use geom_density() to create a density plot, with some transparency (alpha).
geom_density(alpha = 0.7) +
# Use facet_wrap() to create a separate panel for each distribution.
# The 'scales = "free"' argument allows each panel to have its own independent x-axis scale,
# which is crucial for clearly visualizing the different distributions.
facet_wrap(~distribution, scales = "free") +
# Customize the plot titles and labels.
labs(
title = "Comparison of Different Probability Distributions",
subtitle = "Normal, Uniform, and Exponential Distributions",
x = "Value",
y = "Density"
) +
# Use a minimal theme for a clean look.
theme_minimal() +
# Further customize the theme to center the titles and remove the legend.
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
strip.text = element_text(face = "bold", size = 12) # Customize facet title text
) +
# Manually set the colors for each distribution for better visual appeal.
# The values are from a colorblind-friendly palette.
scale_fill_manual(values = c("Normal" = "#1f78b4", "Uniform" = "#33a02c", "Exponential" = "#e31a1c"))
# Create the plot using a density plot for a smooth visual representation.
# The fill color is mapped to the "distribution" column.
ggplot(all_data, aes(x = value, fill = distribution)) +
# Use geom_density() to create a density plot, with some transparency (alpha).
geom_density(alpha = 0.7) +
# Use facet_wrap() to create a separate panel for each distribution.
# The 'scales = "free"' argument allows each panel to have its own independent x-axis scale,
# which is crucial for clearly visualizing the different distributions.
facet_wrap(~distribution, scales = "free") +
# Customize the plot titles and labels.
labs(
title = "Comparison of Different Probability Distributions",
subtitle = "Normal, Uniform, and Exponential Distributions",
x = "Value",
y = "Density"
) +
# Use a minimal theme for a clean look.
theme_minimal() +
# Further customize the theme to center the titles and remove the legend.
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
strip.text = element_text(face = "bold", size = 12) # Customize facet title text
) +
# Manually set the colors for each distribution for better visual appeal.
# The values are from a colorblind-friendly palette.
scale_fill_manual(values = c("Normal" = "#1f78b4", "Uniform" = "#33a02c", "Exponential" = "#e31a1c"))
setwd("~/Library/CloudStorage/OneDrive-UvA/GitHub/bds-toolbox-2025")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
#### SET_UP ####
knitr::opts_chunk$set(echo = TRUE, eval = FALSE) # set default echo = TRUE for all code blocks
rm(list = ls()) # Remove any existing objects in memory
#| echo: true
#| code-fold: true
library("gt")
data("pizzaplace")
pizza_top <- pizzaplace %>%
dplyr::mutate(size = factor(size, levels = c("S", "M", "L"))) %>%
dplyr::count(name, type, size, price, sort = TRUE) %>%
dplyr::top_n(n = 5)
pizza_top %>%
gt::gt() %>%
gt::tab_header(title = "Pizza Top 5", subtitle = "2015") %>%
gt::fmt_currency(columns = price, currency = "USD") %>%
gt::tab_source_note(source_note = gt::md("Source: [pizzaplace dataset](https://gt.rstudio.com/articles/gt-datasets.html#pizzaplace)")) %>%
gt::opt_stylize(style = 6)
#| echo: true
#| code-fold: true
library("ggplot2")
pizza_top %>%
ggplot2::ggplot(aes(x = reorder(name, n, decreasing = TRUE), y = n)) +
ggplot2::geom_point(aes(color = type, size = size)) +
ggplot2::geom_text(aes(label = price), nudge_y = -30) +
ggplot2::labs(title = "Pizza Top 5", subtitle = "2015", x = "name")
suppressWarnings(pizza_top %>%
ggplot2::ggplot(aes(x = reorder(name, n, decreasing = TRUE), y = n)) +
ggplot2::geom_point(aes(color = type, size = size)) +
ggplot2::geom_text(aes(label = price), nudge_y = -30) +
ggplot2::labs(title = "Pizza Top 5", subtitle = "2015", x = "name"))
pizza_top %>%
ggplot2::ggplot(aes(x = reorder(name, n, decreasing = TRUE), y = n)) +
ggplot2::geom_point(aes(color = type, size = size)) +
ggplot2::geom_text(aes(label = price), nudge_y = -30) +
ggplot2::labs(title = "Pizza Top 5", subtitle = "2015", x = "name") %>%
suppressMessages()
pizza_top %>%
ggplot2::ggplot(aes(x = reorder(name, n, decreasing = TRUE), y = n)) +
ggplot2::geom_point(aes(color = type, size = size)) +
ggplot2::geom_text(aes(label = price), nudge_y = -30) +
ggplot2::labs(title = "Pizza Top 5", subtitle = "2015", x = "name") %>%
suppressWarnings()
pizza_top %>%
ggplot2::ggplot(aes(x = reorder(name, n, decreasing = TRUE), y = n)) +
ggplot2::geom_point(aes(color = type, size = size)) +
ggplot2::geom_text(aes(label = price), nudge_y = -30) +
ggplot2::labs(title = "Pizza Top 5", subtitle = "2015", x = "name")
#| echo: true
#| code-fold: true
library("gt")
pizza_season <- pizzaplace %>%
dplyr::mutate(month = lubridate::month(date, label = TRUE)) %>%
dplyr::group_by(month) %>%
dplyr::count(type)
pizza_season %>%
tidyr::pivot_wider(names_from = month, values_from = n) %>%
gt::gt() %>%
gt::tab_header(title = "Pizza Season", subtitle = "2015") %>%
gt::tab_source_note(source_note = gt::md("Source: [pizzaplace dataset](https://gt.rstudio.com/articles/gt-datasets.html#pizzaplace)")) %>%
gt::opt_stylize(style = 6)
#| echo: true
#| code-fold: true
#| fig.height: 5
#| fig.show: "hold"
library("ggplot2")
library("lubridate")
fig_season_1 <- pizza_season %>%
ggplot2::ggplot(aes(x = month, y = n, group = type)) +
ggplot2::geom_line(aes(linetype = type)) +
ggplot2::labs(title = "Pizza Season", subtitle = "2015")
fig_season_1
fig_season_2 <- pizza_season %>%
ggplot2::ggplot(aes(x = month, y = n, group = type)) +
ggplot2::geom_bar(aes(fill = type), stat = "identity") +
ggplot2::labs(title = "Pizza Season", subtitle = "2015")
fig_season_2
