---
title: "<span style='color: white;font-size: 0.7em;'>Data Visualization</span>"
subtitle: "<span style='color: white;'>Behavioral Data Science Toolbox 2025</span>"
author: "<span style='color: white;'>Lecturers: Annie Johansson and Lilian Ye</span>"
#footer: "<span style='color: white;'>Cover photo made in R by <a href='https://art.djnavarro.net' style='color: pink; text-decoration: underline;'>Danielle Navarro</a></span>"
format: 
  revealjs:
    highlight-style: arrow
    include-navbar: true
    logo: images/uva_logo.png
    preview-links: false
    progress: true
    slide-number: true
    show-slide-number: print
    smaller: false
    touch: true
editor: source
title-slide-attributes:
  data-background-image: "images/coverphoto.jpg"
  data-background-size: auto
---

```{r set-up}
knitr::opts_chunk$set()
```

# Better plots ü•á {background-color="#8000FF"}

## Tuesday, Oct 7

-   Feedback on assignment 1
-   Recap: what makes a good DV?
-   More data visualization features
-   Work on assignment 2

## Tips from Assignment 1

## One dataset, many visualizations

```{r}
library(tidyverse)
```

::::: columns
::: {.column width="50%"}
```{r pizza-table }
#| echo: true
#| code-fold: true
library("gt")
data("pizzaplace")
pizza_top <- pizzaplace %>%
  mutate(size = factor(size, levels = c("S", "M", "L"))) %>%
  count(name, type, size, price, sort = TRUE) %>%
  top_n(n = 5)
pizza_top %>%
  gt() %>%
  tab_header(title = "Pizza Top 5", subtitle = "2015") %>%
  fmt_currency(columns = price, currency = "USD") %>%
  tab_source_note(source_note = md("Source: [pizzaplace dataset](https://gt.rstudio.com/articles/gt-datasets.html#pizzaplace)")) %>%
  opt_stylize(style = 6)
```
:::

::: {.column width="50%"}
```{r pizza-scatter, warning=FALSE}
#| echo: true
#| code-fold: true
library("ggplot2")
pizza_top %>%
  ggplot(aes(x = reorder(name, n, decreasing = TRUE), y = n)) +
  geom_point(aes(color = type, size = size)) +
  geom_text(aes(label = price), nudge_y = -30) +
  labs(title = "Pizza Top 5", subtitle = "2015", x = "name") 
```
:::
:::::

## One dataset, many visualizations

::::: columns
::: {.column width="50%"}
```{r pizza-table-timeseries }
#| echo: true
#| code-fold: true
library("gt")
pizza_season <- pizzaplace %>%
  mutate(month = lubridate::month(date, label = TRUE)) %>%
  group_by(month) %>%
  count(type)
pizza_season %>%
  pivot_wider(names_from = month, values_from = n) %>%
  gt() %>%
  tab_header(title = "Pizza Season", subtitle = "2015") %>%
  tab_source_note(source_note = md("Source: [pizzaplace dataset](https://gt.rstudio.com/articles/gt-datasets.html#pizzaplace)")) %>%
  opt_stylize(style = 6)
```
:::

::: {.column width="50%"}
```{r pizza-timeseries, }
#| echo: true
#| code-fold: true
#| fig.height: 5
#| fig.show: "hold"
library("ggplot2")
library("lubridate")
fig_season_1 <- pizza_season %>%
  ggplot(aes(x = month, y = n, group = type)) +
  geom_bar(aes(fill = type), stat = "identity") +
  labs(title = "Pizza Season", subtitle = "2015", y = "Number of pizzas sold", x = "Month")
fig_season_1

fig_season_2 <- pizza_season %>%
  ggplot(aes(x = month, y = n, group = type)) +
  geom_line(aes(linetype = type)) +
  labs(title = "Pizza Season", subtitle = "2015", y = "Number of pizzas sold", x = "Month")
fig_season_2
```
:::
:::::

## [from data to viz](https://www.data-to-viz.com/)

![](images/data-to-viz.png){fig.height="600"}

## [from data to viz](https://www.data-to-viz.com/)

![](images/data-to-viz-caveats.png){fig.height="600"}

## Recap

::::: columns
::: {.column width="40%"}
‚úì Keep it simple.

‚úì Don't mislead.

‚úì Tell one story.

‚úì **First impressions matter!**
:::

::: {.column width="60%"}
![](images/misleading.jpeg){fig-align="center"}
:::
:::::

## More data visualization features

-   Chart junk
-   Themes
-   Colors
-   Color blindness
-   Captions
-   Typography
-   File format/size
-   Font embedding

## Chart junk

::::: columns
::: {.column width="60%"}
![NYT](images/chart_junk.png)
:::

::: {.column width="40%"}
![Claus Wilke](images/chart_junk2.png)
:::
:::::

------------------------------------------------------------------------

You can try it yourself with `geom_image()` from `ggimage`

::: fragment
```{r chart-junk, message=FALSE, fig.height=5, fig.width=10}
library(ggimage)
# aggregate to totals
pizza_totals <- pizza_season %>%
  group_by(type) %>%
  summarise(total = sum(n), .groups = "drop") %>%
  mutate(n_icons = round(total / 1000))  # 1 pizza = 1000 sales

# expand data: one row per pizza icon
# this is a trick so that each pizza icon can be plotted separately (essentially using geom_point but appearing as a bar)
chart_junk_data <- pizza_totals %>%
  rowwise() %>%
  mutate(icon_id = list(1:n_icons)) %>%
  unnest(icon_id) 

# plot with üçï
pizza_plot <- ggplot(chart_junk_data, aes(x = icon_id, y = type)) +
  geom_image(aes(image = "images/pizza.png"), size = 0.2) +
  # add white rectangle to cover up excess icons (taken from pizza_totals data)
  geom_rect(
    data = pizza_totals,
    aes(xmin = total/1000, xmax = total/1000 + 2, 
        ymin = as.numeric(factor(type)) - 0.5, 
        ymax = as.numeric(factor(type)) + 0.5),
    inherit.aes = FALSE,
    fill = "white"
  ) +
  labs(
    title = "Total Pizza Sales in 2015",
    x = "Sales (Scale 1:1000)",
    y = NULL
  ) +
  theme_minimal(base_size = 14) +
  theme(
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank(),
    axis.ticks = element_blank()
  )

pizza_plot
```
:::

## 

## Themes

::::: columns
::: {.column width="50%"}
```{r themes-cowplot}
#| echo: true
#| code-fold: true
library("cowplot")
fig_season_2 +
  theme_cowplot()
```
:::

::: {.column width="50%"}
```{r themes-custom}
#| echo: true
#| code-fold: true
my_theme <- theme_cowplot() +
  theme(
    panel.grid.major = element_line(color = "gray90"),
    axis.ticks = element_line(color = "gray20"),
    axis.text = element_text(color = "gray20", face = "italic", size = 16),
    axis.title = element_text(color = "gray20", face = "bold", size = 16),
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 18),
    legend.position = "top",
    legend.title = element_text(size = 16, face = "bold"),
    legend.text = element_text(size = 16)
  )
fig_season_2 + my_theme
```
:::
:::::

## Facets {.smaller}

`theme_cowplot` and `theme_bw()` format facets nicely.

Change facet format manually with `theme(strip.text = element_text(...))` and `theme(strip.background = element_rect(...))`.

:::::: columns
::: {.column width="50%"}
```{r facets}
#| echo: true
#| code-fold: true
fig_season_2 +
  facet_wrap(~type) +
  theme_bw(12) +
  theme(legend.position = "none")
```
:::

:::: {.column width="50%"}
::: fragment
```{r facets-2}
#| echo: true
#| code-fold: true
fig_season_2 +
  geom_line(linetype = "solid", color = "gray30", linewidth = 0.5) +
  facet_wrap(~type) +
  theme_minimal(12) +
  theme(legend.position = "none",
        strip.text = element_text(face = "bold", color = "plum4"),
        strip.background = element_rect(fill = "thistle2", color = NA)) # fill for background; color for border
```
:::
::::
::::::

## Colors

```{r}
#| echo: true
#| code-fold: true
fig_season_1 <- pizza_season %>%
  mutate(quarter = case_when(
    month %in% c("Jan", "Feb", "Mar") ~ "Q1",
    month %in% c("Apr", "May", "Jun") ~ "Q2",
    month %in% c("Jul", "Aug", "Sep") ~ "Q3",
    month %in% c("Oct", "Nov", "Dec") ~ "Q4"
  )) %>%
  ggplot(aes(x = quarter, y = n, group = type)) +
  geom_bar(aes(fill = type), stat = "identity", position = "dodge") +
  labs(title = "Pizza Season", subtitle = "2015, split by quarter", y = "Number of pizzas sold", x = "")

fig_season_1 +
  scale_fill_viridis_d()
```

## Color scales {.smaller}

-   *qualitative* (categorical data)\
-   *sequential* (ordered data that progress from low to high)\
-   *diverging* (ordered data that progress from low to high with a critical midpoint, e.g., 0)\

:::::: columns
::: {.column width="33%"}
```{r}
#| echo: true
#| code-fold: true
fig_season_1 +
  scale_fill_brewer(type = "qual")
```
:::

::: {.column width="33%"}
```{r}
#| echo: true
#| code-fold: true
fig_season_1 +
  scale_fill_brewer(type = "seq")
```
:::

::: {.column width="33%"}
```{r}
#| echo: true
#| code-fold: true
fig_season_1 +
  scale_fill_brewer(type = "div")
```
:::
::::::

## Color blindness {.smaller .scrollable}

![[Claus Wilke](https://clauswilke.com/dataviz/color-pitfalls.html#not-designing-for-color-vision-deficiency)](images/colorblindness.png)

```{r}
#| echo: true
#| code-fold: true
# remotes::install_github("clauswilke/colorblindr")
library("colorblindr")
colorblindr::cvd_grid(fig_season_1)
```

The package `MetBrewer` has many colorblind-friendly palettes:

::::: columns
::: {.column width="30%"}
```{r}
#| echo: true
#| code-fold: true
library("MetBrewer")
MetBrewer::colorblind_palettes
```
:::

::: {.column width="70%"}
```{r}
#| echo: true
#| code-fold: true
fig_season_1 +scale_fill_manual(values = MetBrewer::met.brewer("VanGogh3", n = 4))
```
:::
:::::

::: footer
Packages: [khroma](https://packages.tesselle.org/khroma/) (discrete data), [viridis](https://sjmgarnier.github.io/viridis/) (continuous data), [MetBrewer](https://github.com/BlakeRMills/MetBrewer) & [rijkspalette](https://vankesteren.github.io/rijkspalette/), [colorblindr](https://github.com/clauswilke/colorblindr), [colorspace](https://colorspace.r-forge.r-project.org/articles/ggplot2_color_scales.html).

Resources: [clauswilke.com](https://clauswilke.com/dataviz/color-pitfalls.html){.uri}, [hclwizard.org](https://hclwizard.org/), [viridis Color Maps for R](https://sjmgarnier.github.io/viridis/).
:::

## Color accuracy {.smaller}

::::: columns
::: {.column width="50%"}
Print-proof, [monitor/beamer-proof](https://www.benq.com/en-us/knowledge-center/knowledge/how-to-maintain-color-consistency-on-different-monitors.html), colorblind-proof?

-   Use grayscale (but [color-coding is superior](https://en.wikipedia.org/wiki/Color_coding_in_data_visualization))
-   Use a secondary aesthetic for color
-   Use a viridis color map

![Source: [benq.com](https://www.benq.com/en-us/knowledge-center/knowledge/how-to-maintain-color-consistency-on-different-monitors.html)](images/coloraccuracy1.jpeg){fig-align="left"}
:::

::: {.column width="50%"}
![Source: [Savi et al. (2018)](https://doi.org/10.1016/j.compedu.2017.12.008)](images/coloraccuracy2.png){fig-align="left"}
:::
:::::

## Captions {.smaller}

::::: columns
::: {.column width="50%"}
**Title** Descriptive or declarative

**Methods** Keep it brief

**Results** If not (fully captured) in title

**Definitions** Colors, line types, error bars, etc.

**Data source** If external
:::

::: {.column width="50%"}
![Source: [sketch.es](https://www.datasketch.es/project/655-frustrations-doing-data-visualization)](images/captions.png){fig-align="left"}
:::
:::::

::: footer
Resources: [clauswilke.com](https://clauswilke.com/dataviz/figure-titles-captions.html), [more](https://www.internationalscienceediting.com/how-to-write-a-figure-caption/), [more](https://www.aje.com/arc/writing-effective-figure-legend/), [more](https://blog.bioturing.com/2018/05/10/how-to-craft-a-figure-legend-for-scientific-papers/).
:::

## Typography {.smaller}

::::: columns
::: {.column width="30%"}
-   Learn everything about [typography](https://practicaltypography.com/).

-   Find inspiration and [recommendations](https://www.typewolf.com/recommendations).

-   Choose a font for [data visualizations](https://nightingaledvs.com/choosing-fonts-for-your-data-visualization/).

-   Pick good [font combinations](https://fontjoy.com/).

-   Or just use [arial or helvetica](https://pubs.acs.org/doi/10.1021/acs.chemmater.6b00306).\
:::

::: {.column width="70%"}
```{r typography, fig.width=8, fig.height=5}
#| echo: true
#| code-fold: true
library("showtext")
sysfonts::font_add_google("Lekton")
showtext::showtext_auto()

fig_season_2 +
  theme_cowplot() +
  theme(text = element_text(family = "Lekton", size = 20))
```
:::
:::::

## 

```{r chart-junk-before}
#| echo: true
#| code-fold: true
pizza_plot
```

## 

```{r chart-junk-after, }
#| echo: true
#| code-fold: true
sysfonts::font_add_google("Lobster")
sysfonts::font_add_google("Lexend")
showtext::showtext_auto()

pizza_plot +
  # add a geom_rect element with opacity on top of pizza bars, to highlight the biggest bar
  geom_rect(
    data = pizza_totals %>%
      mutate(highlight = ifelse(type == "classic", TRUE, FALSE)),
    aes(xmin = 0, xmax = total/1000, 
        ymin = as.numeric(factor(type)) - 0.5, 
        ymax = as.numeric(factor(type)) + 0.5,
        alpha = highlight),
    inherit.aes = FALSE,
    fill = "white"
  ) +
  scale_alpha_manual(values = c("TRUE" = 0, "FALSE" = 0.3), guide = "none") +
  labs(title = "The classic is a classic for a reason.",
       subtitle = "Total Pizza Sales in 2015",
       caption = "Source: pizzaplace dataset") +
  # change fonts
  theme(text = element_text(family = "Lexend", color = "gray30"),
                 plot.title = element_text(family = "Lobster", size = 20, color = "tomato3"),
                 plot.subtitle = element_text(family = "Lexend", size = 16), 
                 axis.title.x = element_text(family = "Lobster", size = 16),
                 axis.text.y = element_text(family = "Lobster", size = 16, color = "tomato3"))
```

::: footer
Packages: [showtext](https://github.com/yixuan/showtext).
:::

::: notes
:::

## File format/size {.smaller}

::::: columns
::: {.column width="50%"}
-   File size: email attachment, webpage/image load time, compilation time
-   File format: resizing [vector vs. bitmap/raster](https://www.lifewire.com/vector-and-bitmap-images-1701238). For bitmap images, set the plot resolution: *dpi = c("retina", "print", "screen")*

```{r}
#| echo: true
#| eval: false
ggplot2::ggsave("awesome_plot.png",
                width = 5,
                height = 5,
                units = "cm",
                dpi = "retina")
```
:::

::: {.column width="50%"}
![Source: [clauswilke.com](https://clauswilke.com/dataviz/image-file-formats.html)](images/file_formats.png){fig-align="left"}
:::
:::::

::: footer
Enlarge bitmap [with AI](https://letsenhance.io/) (paid). Yes, you can save to [.tex](https://daqana.github.io/tikzDevice/).
:::

## Font embedding {.smaller}

Vector images pick the closest font available (if the actual font is not available on the recipients computer). You can embed fonts into the vector image.

-   *showtext* [converts characters into polygons](https://github.com/yixuan/showtext/issues/46). Embedding is no longer required, but text is no longer searchable.
-   *extrafont* [supports font embedding](https://r-graphics.org/recipe-output-fonts-pdf), but supports fewer fonts.

Adobe Acrobat (paid version) can be used to [manually embed fonts in a PDF](https://www.adobe.com/uk/acrobat/resources/embed-fonts-in-pdf.html).

::: footer
Packages: [showtext](https://github.com/yixuan/showtext), [extrafont](https://github.com/wch/extrafont).

Should [color profiles also be embedded](https://www.color.org/profile_embedding.xalter)? Not sure, and not clear how R/ggplot2 handles this.
:::

## Continue learning {.smaller}

::::: columns
::: {.column width="50%"}
Viz types and examples: [From Data to Viz](https://www.data-to-viz.com/#explore), [The R Graph Gallery](https://r-graph-gallery.com/), [clauswilke.com](https://clauswilke.com/dataviz/directory-of-visualizations.html)

Extensions: [ggplot2 Extensions Gallery](https://exts.ggplot2.tidyverse.org/gallery/)

Books: [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/)

NYT: [What's going on in this graph?](https://www.nytimes.com/column/whats-going-on-in-this-graph)

Data: [Statistics Netherlands](https://edwindj.github.io/cbsodataR/) or `data()`
:::

::: {.column width="50%"}
![RTFM: ggplot2 Book](images/ggplot2_book.jpg){fig-align="left" width="50%"}
:::
:::::

## Get inspiration {.smaller}

::::: columns
::: {.column width="50%"}
Podcasts: [Data Stories](https://datastori.es/), [Explore Explain](https://www.visualisingdata.com/podcast/), [Data Viz Today](https://dataviztoday.com/)

Blogs: [FlowingData](https://flowingdata.com/)

Journals: [Nightingale](https://nightingaledvs.com/)

Comics: [Matt-Heun Hong](https://medium.com/@MattIanHong), [Martin Telefont](https://twitter.com/martintelefont/status/1147737522182742017), [Natalia Kiseleva](https://eolay.tilda.ws/datavizcomics/en)

Generative art: [Clause O. Wilke](https://clauswilke.com/art/), [Danielle Navarro](https://art.djnavarro.net/), [Thomas Lin Pedersen](https://www.data-imaginist.com/art)

Awards: [Information is Beautiful](https://www.informationisbeautifulawards.com/showcase?action=index&controller=showcase&page=1&pcategory=winner&type=awards)

Interactive visualizations: [R Psychologist](https://rpsychologist.com/viz)

Explorable explanations: [Nicky Case](https://ncase.me/), [Setosa](https://setosa.io/)
:::

::: {.column width="50%"}
![[Thomas Lin Pedersen](https://thomaslinpedersen.art/work/becoming/)](images/becoming_2.jpg){fig-align="left" height="500"}
:::
:::::

