---
title: "Data Visualization Assignment 1"
format: 
  html:
    code-copy: true
editor: visual
---

```{r actual-setup, include = FALSE}
knitr::opts_chunk$set(eval = FALSE) 
rm(list = ls()) 
```

## Instructions

This is the first assignment for the Data Visualization module. The aim here is to get acquainted with the Prowise Learn data, practice with some ggplot basics, and to get you started with working with your visualizations for the final assignment.

With this assignment, you can gain X points, plus X bonus points. Please [refer here](how-do-we-grade.qmd) for an overview of how we grade your data visualizations. Part 1 is completed, and thus also graded, individually. Part 2 should be completed with your assigned group. Please make sure to clearly indicate your group number and names of all group members in your submission. One person should submit the assignment on behalf of the group. If more than one person submits the group assignment, we will only look at one of them.

The assignment is due on **Sunday October 5th, 2025 at 23:59**. Submit your assignment to Canvas, under "DV Assignment 1".

Your submission for Part 1 should contain the following files:

-   R code (style checked & working) in a .Rmd or .R file.\
-   Your (improved) version of the plot, compiled to .html or .pdf.\
-   Your interactive plot, compiled to .html or .pdf.

with file names in the following structure: `DV-Assignment1-Firstname-Lastname-PartA.Rmd` (or `.R`), `DV-Assignment1-Firstname-Lastname-PartA.pdf` (or `.html`).

Your group submission (Part 2) should contain the following files:

-   R code (style checked & working) in a .Rmd or .R file.
-   Your plot and short description, compiled to .html or .pdf.

with file names in the following structure: `DV-Assignment1-GroupX-PartB.Rmd` (or `.R`), `DV-Assignment1-GroupX-PartB.pdf` (or `.html`).

### ⚠️ Please read this before submitting

We want to be able to understand and run your code. This will help us to give you a fair grade. Therefore we ask that - before you submit your code - you:

-   Run the Code Style check (i.e. the lintr) with the following code & resolve any issues. If you don't know what an error means, internet is your best friend! Also, study the lecture slides of the code styling session. Remember that you can win a full point by making sure your code styling is correct.

```{r eval=FALSE}
oefenwebTools::lintrProfile(rstudioapi::getSourceEditorContext()$path)  
```

-   Clear your environment (`rm(list = ls())`) and re-run your code. We won't have anything stored in memory that is not created/retrieved in the script, therefore clearing your environment is a great way to detect any bugs that might accidentally be present.

-   Don't install packages in your code. If we need to install a package that you used, state which packages need to be installed at the beginning of your code.


## Working with the Oefenweb Server
Before starting the assignment, please look at the handout on [How to connect to the Oefenweb Server](working-on-the-server.qmd). This will help you to get started with retrieving data from the server. It also contains a useful tutorial on how to use SQL to retrieve data. Go through this code and make sure you understand it, as you will need it for this assignment.

## Part 1: Oefenweb Data & Basic ggplot (Individual)
### A. Replicate this plot

The following code will give you the data necessary to create the plot at the end of this section. Your task is to replicate the plot using `ggplot2`.  
Don't worry if you cannot reproduce the plots exactly. You can, for example, use different colors and font families. 

Grading:

-   Does the data show the same pattern? \[1.5 pt\]
-   Is the styling the same? \[1.5 pt\]
-   BONUS: Where there extra features added? \[1 pt\]
-   Did the code run? \[0.5 pt\]
-   Were styling issues resolved? (lintr) \[0.5 pt\]

**Bonus points**  

Can you spot any areas where this plot can be improved? 1 extra point will be awarded for changes made, or features added or removed to the visualization. They need to be meaningful and improve the visualization. Simply changing colors or themes will not be rewarded, unless you can motivate why your changes are an improvement.


```{r 1A setup}
# Install Packages
# Find everything that the user currently has installed
all_installed_packages <- installed.packages()[, "Package"]
# Install any missing, but required packages
# nolint start -- trick to omit some lines from the lintr checker, only if you have a good reason!
if (!"tidyverse" %in% all_installed_packages) {install.packages("tidyverse")}
if (!"devtools" %in% all_installed_packages) {install.packages("devtools")}
if (!"oefenwebDatabase" %in% all_installed_packages) {devtools::install_github(repo = "Oefenweb/r-database")}
if (!"oefenwebTools" %in% all_installed_packages) {devtools::install_github(repo = "Oefenweb/r-tools")}
if (!"jsonlite" %in% all_installed_packages) {install.packages("jsonlite")}
if (!"ggplot2" %in% all_installed_packages) {install.packages("ggplot2")}
if (!"cowplot" %in% all_installed_packages) {install.packages("cowplot")}
# nolint end

# Load Required Packages
library(tidyverse)
library(oefenwebDatabase)
library(oefenwebTools)
library(jsonlite)
library(cowplot)
library(ggplot2)

# make database connection
con <- oefenwebDatabase::connect()
```

For this assignment, we will have a look at the two items of the same domain. First we have to get the items from the `items` table and after that we obtain the `log_records` of these items.

```{r 1A data}
item_ids <- c(188391, 186408)

items <- suppressWarnings(DBI::dbGetQuery(con, paste0("SELECT *
                              FROM `items`
                              WHERE id IN (", paste(item_ids, collapse = ","), ")")))

# renaming first column of items data.frame to "item_id"
colnames(items)[1] <- "item_id"

# obtaining the log_records for the two items of the visualization
# in this example R code is used "within" a SQL query
itemsLogs <- suppressWarnings(DBI::dbGetQuery(con, paste0("SELECT *
                                                        FROM `log_records_2`
                                                        WHERE `item_id` IN (",
                                                        paste(c(items$item_id), collapse = ", "), ")")))
```

Now that we have the "raw" data, we can start to filter and prepare it for the visualization we want to build.

```{r 1A data-prep-1}
# make the question and answer_options "json" free
for (i in 1:nrow(items)) {
  items$correct_answer[i] <- jsonlite::fromJSON(items$answer_options[i])$answerOptions[1]
  items$question[i] <- jsonlite::fromJSON(items$question[i])$question$content
}

# we do a left_join between itemLogs and items table to get the item question and correct_answer into itemsLogs
itemsLogs <- dplyr::left_join(itemsLogs,
                              items[, c("item_id", "question", "correct_answer")],
                              by = "item_id")

```

Let's do some further data preparations. We prefer to change the data instead of changing labels in the plot. If you change the data, the plot and data will resemble each other, hence you can be more certain that you don't have errors in your visualization.

```{r 1A data-prep-2}
# transform variables to suitable types
itemsLogs$response_in_seconds <- itemsLogs$response_in_milliseconds / 1000
itemsLogs$correct_answered <- as.logical(itemsLogs$correct_answered)
itemsLogs$question <- factor(itemsLogs$question)

# make answer column
itemsLogs$given_answer_type <- NA
for (i in 1:nrow(itemsLogs)) {
  if (itemsLogs$correct_answered[i]) {
    itemsLogs$given_answer_type[i] <- "correct"
  } else {
    itemsLogs$given_answer_type[i] <- "incorrect"
    if (itemsLogs$answer[i] == "¿") {
      itemsLogs$given_answer_type[i] <- "questionmark"
    }
  }
}
itemsLogs$given_answer_type <- factor(itemsLogs$given_answer_type)
```

Before we continue we get the grade information from the users table, add this info, do some filtering and change it to a factor:

```{r 1A data-prep-3}
users <- DBI::dbGetQuery(con, "SELECT id AS new_user_id, grade FROM users")
itemsLogs <- dplyr::left_join(itemsLogs, users, by = "new_user_id")

# filter (with dplyr) to only work with grade 3 to 8
itemsLogs <- itemsLogs %>%
  filter(grade %in% c(3:8)) %>%
  as.data.frame()

itemsLogs$grade <- factor(itemsLogs$grade, levels = c(3:8), labels = paste0("Grade ", c(3:8)))

```

Now we can make the first plot. This plot shows us the relation which users (in terms of grade) practice these items. Note that for this plot we don't use the `geom_histogram` function. In this case we first calculate the relative frequencies of the number of responses per grade, for each question. We store this information in a data.frame that we than use for plotting. So first make this data.frame! With `geom_col()` we than plot the bars.

Look at this nice trick to add the %-symbol to the labels: `scale_y_continuous(labels = function(x) paste0(x, "%"))`

```{r 1A plot-1, echo = FALSE, fig.align = "center"}
plotTheme <- theme(axis.text.x = element_text(angle = 45, hjust = 1),
                   plot.title = element_text(hjust = 0.5))
# plots
gradeBars <- round(apply(table(itemsLogs$question, itemsLogs$grade), 1, prop.table), 2) * 100
gradeBarsDF <- data.frame(question = c(rep("10 - 2", dim(gradeBars)[1]), rep("100 - 40", dim(gradeBars)[1])),
                          grade = c(rep(paste0("Grade ", c(3:8)), 2)),
                          percentage = c(gradeBars[, 1], gradeBars[, 2]))

ann_text <- data.frame(percentage = 30, grade = "Grade 7", question =  "10 - 2")
plot1 <- ggplot(data = gradeBarsDF, aes(y = percentage, x = grade, fill = question)) +
  geom_col(position = "dodge") +
  scale_y_continuous("Percentage", labels = function(x) paste0(x, "%")) +
  scale_fill_manual("Question", values = c("#1b9e77", "#7570b3")) +
  labs(title = "Questions answered vs. User Grade", x = "") +
  geom_text(data = ann_text, aes(x = grade, y = percentage),
              label = "10 - 2 is mostly practiced by grade 3 users \n and 100 - 40 by users in grade 5",
            family = "Courier",
            size = 2) +
  theme_minimal() +
  plotTheme
plot(plot1)
```

For the second plot we look into response times and given answer (correct, incorrect or questionmark). Note that you first have to make a variable with these answers (correct, incorrect, question-mark).
  
```{r 1A plot-2, echo = FALSE, fig.align = "center"}
# response time
plot2 <- ggplot(data = itemsLogs, aes(x = response_in_seconds,
                                      linetype = given_answer_type,
                                      color = given_answer_type)) +
  facet_grid(. ~ question) +
  scale_color_manual(values = c("#4daf4a", "#e41a1c", "#377eb8")) +
  scale_x_continuous(labels = function(x) paste0(x, "s")) +
  geom_density() +
  theme_minimal() +
  labs(title = "Response Time and Answer Given",
       linetype = "Answer", color = "Answer", x = "Response in Seconds", y  = "Density") +
  theme(legend.position = "top",
        strip.text.x = element_text(size = 12, face = "bold")) +
  plotTheme
plot(plot2)
```

Finally we make a plot with text to have some more information in our visualization:

```{r 1A plot-3, echo=FALSE, fig.align = "center"}
text <- paste0("Examination of question '10 - 2' and ",
               "'100 - 40' of the domain 'Substraction'\n (Domain Id: 2). ",
               "What are the response times of these items and what is\n the ",
               "grade of users that practise these items?")
text1 <- ggplot() +
  annotate("text", x = 8, y = 25, size = 4, label = text) +
  theme(panel.grid = element_blank(),
        panel.background = element_blank(),
        axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())
plot(text1)
```

Finally we combine the three plots (one text plot and two figure plots) into one plot by means of the plot_grid function of the `cowplot` package. **This is the visualization that you should replicate in this assignment Part II**.

I used these settings in my rMarkdown code chunk: `fig.height = 8, fig.width = 10, fig.align = "center"`

```{r 1A plot-4, echo = FALSE, fig.height = 8, fig.width = 10, fig.align = "center"}
bottomRow <- suppressMessages(plot_grid(plot1, plot2))
suppressWarnings(plot_grid(text1, bottomRow, ncol = 1, rel_heights = c(1, 2)))
```


Tips:

* On plot 1 there is text on the third facet which does not use the default font family  
* To select nice colors go to http://colorbrewer2.org [or tips on the Data Visualisation slides]
* Google (or other search engines) are your best friend, especially on stack overflow there are many questions and answers about ggplot2

Please note that you will only receive bonus points if your extra features are meaningful and improve the visualization. 

When you are done, please close the connection to the database (run this code in the console!):

```{r 1A close connections}
oefenwebDatabase::close_connections()
```

### B. Interactive visualizations with Plotly

Copy the code below to create a plot showcasing ... 
Now, your assignment is to make this plot interactive using the `plotly` package. You can use the `ggplotly()` function to convert a ggplot object to an interactive plotly object. Focus on adding interactive elements that enhance the user experience and provide additional insights into the data. Remember to keep the plot clear and not overly complicated.

Grading: 

-   Does the interactive plot work? \[1 pt\]
-   Do the interactive elements enhance the user experience? \[1 pt\]

## Part 2: Start on Final DV Project (Group)

### A. Specify your research question

In class 1 you indicated your preference for a research question for the final project, and were assigned a group to work with. Together with your group, read the instructions for your assigned research question in [Assignment 2](assignment-2.qmd) again. 

*  Does your project take an analytical, inference, or predictive approach? Is it clear what is expected in the final data visualization with regards to the approach?  
*  Who is your target audience? How might this influence choices for your final visualization?

### B. Connect to Git and load data
For this project, you will collaborate using Git. Connect your server environment to Git by following these instructions: [Connecting RStudio Server to Git](https://hpc.ugent.be/docs/en/rstudio-server/git-rstudio-server).  
One person should download the template R project folder and create a new GitHub repository for your group. Add the documents inside the template folder to the repository. If this is done correctly, the resulting repository should have the following folder structure: 

```
your-project-name/
├── .gitignore
├── README.md
├── your-project-name.Rproj
├── code/
|   └── 00-load-data.R
└── report/
    └── DV-Assignment2-GroupX.Rmd
    └── DV-Assignment2-GroupX.html
```

The other group members can then clone this repository to their server environment. Make a first commit and push it. Check that the other group members can pull these changes. If this works, you should be properly set up to work together using Git! 

Feel free to add folders or files within the repository if necessary. Make sure that you maintain the structure such that you follow a [reproducible workflow](https://tellingstorieswithdata.com/03-workflow.html#r-projects-and-file-structure). Additionally, it is important that you never push data to GitHub. If you have to store data, do this in a separate folder outside of your Git repository. Your `.gitignore` file should already contain the following lines: 

```
# Ignore data files
data/
*.rds
*.RDS
*.RData
*.rdata
*.csv
*.tsv
*.xlsx
*.rda
```

This should prevent you from accidentally pushing data files to GitHub. Still, be mindful not to add any data files to your project repository. 

Now, load in the necessary data for your visualization. The code for this is available in [Assignment 2](assignment-2.qmd). Use the script `00-load-data.R` in the `code/` folder to load in the data. Examine the data. Discuss with your group: 

*  What is the structure of the data?  
*  What are the main variables? Can you already make some exploratory plots to understand these variables better?  
*  What data cleaning steps are necessary? Do you, for example, need to filter out some observations to obtain reliable results?  


### C. Make your first visualization

For this assignment you can make any visualization about the chosen theme of the final project with these minimal requirements:

- use multiple plots
- change the theme (you can use a default theme or create your own)
- use a good color-scheme, for example colorblind proof
- highlight some interesting data points, for example using color or text

Include a description of what you want to communicate, and how you did that. Really work towards making a data visualization that highlights or substantiates a single conclusion. This plot does not have to be the plot for your final project (it probably is not), but use this assignment to get feedback from us on your current ideas.

Grading:

* Aesthetics
  + Is the plot legible? [1pt]
  + Do the colors add to the interpretability? [1pt]
  + Is the plot simple? [0.5 pt]
* Communication
  + Is it clear what the plots tries to communicate? [1pt]
  + Does the plot communicate the described conclusions/description? [1pt]
  + The plot requires minimal explanation [0.5 pt]
* Creative/complexity
  + Is the plot creative? [0.5 pt]
  + Is the plot/analysis complex? [0.5 pt]

**Clearly state your group members in your document. And please make sure ALL team members submit the same R code and plots for this group assignment.**


